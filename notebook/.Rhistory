length(out$null)
length(null.08)
null.08[[1]]
names(prn.08)
prn.08$cnpb
colnames(prn.08$cnpb)
colnames(prn.08$c)
ls
cen
cen.
cen.
colnames(x[,apply(x,2,sum)!=0])
cen.
length(cen.)
length(colnames(x[,apply(x,2,sum)!=0]))
cen.
colnames(x[,apply(x,2,sum)!=0])
dim(x)
?degree
test=rgraph(5)
test
degree(test,'freeman')
test <- cbind(test,test)
test
degree(test,'freeman')
length(degree(test,'freeman'))
?gplot.target
betweenness(x)
x
dim(x)
sum(dim(x))
betweenness(x)
?gplot.target
x
x=rgraph(5)
x
x=cbind(x,x)
x
ll
head(out)
dim(out)
dim(x)
cen
dim(x)
length(cen)
barplot(cen)
x
x
cen
?degree
cen
?degree
cen
mode(x)
class(x)
?gplot.target
x
dim(x)
length(cen)
as.matrix(x)
as.adjacency(pbr.09$c)
get.adjacency(pbr.09$c)
adjacency(pbr.09$c)
as.edgelist.sna(x)
out <- as.edgelist.sna(x)
cen
out
x==out
cen
btw
plot(x.el)
gplot(x.el)
x.el
x.col
?gplot.target
example(gplot.target)
g
mode(g)
class(g)
test=x[1:10,1:5]
test
g
gplot.target(test,betweeness(test))
gplot.target(test,betweenness(test))
dim(test)
x
apply(x,2,sum)
x
apply(x,2,sum)
x
cen
names(cen)
library(devtools)
install_github(username='MKLau',repo='pb_removal_nets')
install_github(username='MKLau',repo='CommunityGeneticsAnalyses/ComGenR')
plotweb(n08c,method='normal')
g08
g08
g09
nestedness(n08c)
nest08[[1]]
summary(nest08[[1]])
nest08[[1]]
names(nest08[[1]])
test <- commsimulator(n08c,method='r1',thin=100)
test
nestedtemp(n08c)
nestedtemp(test)
cm.test
x <- cm.08c
x
obs <- cm.08c
x <- n08c
nit=1
method='r1'
thin=50
y
i=1
sim
obs
out
sd(sim)
sim
n=3
out
obs
sim
sd(sim)
cm.08.x <- cm.08.n
cm.08x <- cm.08n
cm.09x <- cm.09n
slot(cm.09c,name='likelihood')
slot(cm.08c,name='likelihood')
slot(cm.08x,name='likelihood')
slot(cm.09x,name='likelihood')
n09[,1]
n09x
colnames(09x)
colnames(n09x)
n09x[,1]
hist(n09x[,1])
hist(n09c[,1])
cMods
x
x <- n09c
sigMods(x,3)
sim
n=3
sigMods(x,3)
sigMods <- function(x,n=500){
  obs <- slot(computeModules(sign(x)),name='likelihood')
  sim <- list()
  for (i in 1:n){
    sim[[i]] <- commsimulator(sign(x),thin=50,method='r1')
  }
  sim <- unlist(lapply(sim,function(x) slot(computeModules(sign(x)),name='likelihood')))
  out <- c(obs=obs,mu.sim=mean(sim),sd.sim=sd(sim),
           z=((obs-mean(sim))/sd(sim)),
           p=((length(sim)[sim<=obs])/n)
           )
  return(out)
}
