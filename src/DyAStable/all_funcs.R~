simil.levenshtein <- function(string1, string2, case=TRUE, map=NULL) {
		
	if(!is.null(map)) {
		m <- matrix(map, ncol=2, byrow=TRUE)
		s <- c(ifelse(case, string1, tolower(string1)), ifelse(case, string2, tolower(string2)))
		for(i in 1:dim(m)[1]) s <- gsub(m[i,1], m[i,2], s)
		string1 <- s[1]
		string2 <- s[2]
	}
 
	if(ifelse(case, string1, tolower(string1)) == ifelse(case, string2, tolower(string2))) return(0)
 
	s1 <- strsplit(paste(" ", ifelse(case, string1, tolower(string1)), sep=""), NULL)[[1]]
	s2 <- strsplit(paste(" ", ifelse(case, string2, tolower(string2)), sep=""), NULL)[[1]]
	
	l1 <- length(s1)
	l2 <- length(s2)
	
	d <- matrix(nrow = l1, ncol = l2)
 
	for(i in 1:l1) d[i,1] <- i-1
	for(i in 1:l2) d[1,i] <- i-1
	for(i in 2:l1) for(j in 2:l2) d[i,j] <- min((d[i-1,j]+1) , (d[i,j-1]+1) , (d[i-1,j-1]+ifelse(s1[i] == s2[j], 0, 1)))
	
	d[l1,l2]
}

string.simil <- function(x,y)
{
	x <- toString(x)
	y <- toString(y)
	sizeX <- nchar(x)
	sizeY <- nchar(y)
	n <- min(sizeX,sizeY)
	k <- 0
	for(i in 1:n){
		if(strtrim(x,i) != strtrim(y,i))
			break
		k <- k + 1
	}
	nMax <- max(sizeX,sizeY)
	if(k<2){
		simil<- 0
	}else{
		simil <- k/nMax
	}
	simil
}

string.jaccard <- function(string1,string2)
{
	x <- toString(string1)
	y <- toString(string2)
	sizeX <- nchar(x)
	sizeY <- nchar(y)
	n <- min(sizeX,sizeY)
	intersect <- 0
	union <- 0
	for(i in 1:n){
		if(substr(x,i,i) == substr(y,i,i))
			intersect <- intersect + 1
	}
	nMax <- max(sizeX,sizeY)
#	if(intersect<3){
		#simil<- 0
#	}else{
		simil <- intersect/nMax
#	}
	simil
}

simil.authors <- function(string1,string2)
{
	simil <- NULL
	x <- toString(string1)
	y <- toString(string2)
	f <- FALSE
	words1 <- strsplit(x, " ")
	words2 <- strsplit(y, " ")

	if(words1[[1]][length(words1[[1]])] == words2[[1]][length(words2[[1]])])
	{
		l <- NULL
		k <- NULL
		for(i in words1[[1]])
		{
			l <- paste(l,i)
		}
		for(i in words2[[1]])
		{
			k <- paste(k,i)
		}
		if(simil.levenshtein(l,k) > 2)
			simil <- FALSE
		else 
			simil <- TRUE
	}else
	{
		simil <- FALSE
	}
	simil
}

simil.complex <- function(string1,string2)
{
	simil <- NULL
	x <- toString(string1)
	y <- toString(string2)
	f <- FALSE
	if(simil.levenshtein(x,y) <3){
		simil <- 1
	}else
	{
		words1 <- strsplit(x, " ")
		words2 <- strsplit(y, " ")
		sim <- 0
		for( i in words1[[1]])
		{
			for(j in words2[[1]])
			{
				if(nchar(i) >2 && nchar(j) > 2 || i == j)
				{
					if(simil.levenshtein(i,j)<=3)
					{
					sim <- sim + 1
					}
				}
				if(nchar(i) <= 2 || nchar(j) <=2)
					f <- TRUE
			}
		}
		t <- max(length(words1[[1]]),length(words2[[1]]))
		if(sim == 0)simil <-0
		if(sim<t && sim>0)
		{
			simil<- 2
		}else
		{
			simil <- 0
		}
		if(sim==t)simil <- 1
		simil
	}
}

check.co.authors <- function(string1,string2,bool1,bool2,description)
{

	simil <- 0
	
	if(bool1){
		a1 <- subset(description,author==string1,select=co.author)
		name1 <- a1$co.author
	}else
	{
		a1 <- subset(description,co.author==string1,select=author)
		name1 <- a1$author
	}
	if(bool2)
	{
		a2 <- subset(description,author==string2,select=co.author)
		name2 <- a2$co.author
	}else
	{
		a2 <- subset(description,co.author==string2,select=author)
		name2 <- a2$author
	}
	for(k in 1:length(name1)){
		for(l in 1:length(name2)){
			f <- FALSE
			if(toString(name1[k]) == "" || toString(name2[l]) == "")
			{
				simil <- check.titles(string1,string2,bool1,bool2,description)
			}else	
			{
				w1 <- strsplit(toString(name1[k])," ")
				w2 <- strsplit(toString(name2[l])," ")
				for(i in w1[[1]])
				{
					for( j in w2[[1]])
					{	
						if(simil.levenshtein(i,j)<=3 && nchar(i) >2 && nchar(j) > 2)
						{
							simil <- 1
							break
						}
						if(nchar(i) <=2 && nchar(j) <= 2 && j == i)
						{
							f <- TRUE
						}
					}
				}
				if(simil == 0 && f)
					simil <- check.titles(string1,string2,bool1,bool2,description)
				if(simil == 1) break
			}
		}
	}
	simil
}
check.titles <-function(string1,string2,bool1,bool2,description)
{
	simil <- NULL
	if(bool1){
		a1 <- subset(description,author==string1,select=Title)
	}else
	{
		a1 <- subset(description,co.author==string1,select=Title)
	}
	if(bool2){
		a2 <- subset(description,author==string2,select=Title)
	}else
	{
		a2 <- subset(description,co.author==string2,select=Title)
	}
	if(toString(a1$Title) == "" || toString(a2$Title) == "")
	{
		simil <- 0
	}else
	{
		if(simil.levenshtein(toString(a1$Title),toString(a2$Title)) <=4)
		{
			simil <- 1
		}else
		{
			simil <- 0
		}
	}
	simil
}
"~" <- function(...) UseMethod("~") 
"~.default" <- .Primitive("~") 
"~.character" <- function(...) paste(...,sep="") 

#png(width=600,height=600)
#par(mar=c(3,8,1,1),family="serif")
#setwd("D:/work")  #working dir
library(igraph)     
library(proxy)       
library(lattice) 

sort.data.frame <- function(x,key, ...)
{
	if (missing(key)) {
		rn <- rownames(x)
		if (all(rn %in% 1:nrow(x))) rn <- as.numeric(rn)
		x[order(rn, ...), , drop=FALSE]
	} else {
		x[do.call("order", c(x[key], ...)), , drop=FALSE]
	}
}

#levenshteint még megírjuk

levenshtein <- function(string1, string2, case=TRUE, map=NULL) {
		
	if(!is.null(map)) {
		m <- matrix(map, ncol=2, byrow=TRUE)
		s <- c(ifelse(case, string1, tolower(string1)), ifelse(case, string2, tolower(string2)))
		for(i in 1:dim(m)[1]) s <- gsub(m[i,1], m[i,2], s)
		string1 <- s[1]
		string2 <- s[2]
	}
 
	if(ifelse(case, string1, tolower(string1)) == ifelse(case, string2, tolower(string2))) return(0)
 
	s1 <- strsplit(paste(" ", ifelse(case, string1, tolower(string1)), sep=""), NULL)[[1]]
	s2 <- strsplit(paste(" ", ifelse(case, string2, tolower(string2)), sep=""), NULL)[[1]]
	
	l1 <- length(s1)
	l2 <- length(s2)
	
	d <- matrix(nrow = l1, ncol = l2)
 
	for(i in 1:l1) d[i,1] <- i-1
	for(i in 1:l2) d[1,i] <- i-1
	for(i in 2:l1) for(j in 2:l2) d[i,j] <- min((d[i-1,j]+1) , (d[i,j-1]+1) , (d[i-1,j-1]+ifelse(s1[i] == s2[j], 0, 1)))
	
	d[l1,l2]
}

string.simil <- function(x,y)
{
	x <- toString(x)
	y <- toString(y)
	sizeX <- nchar(x)
	sizeY <- nchar(y)
	n <- min(sizeX,sizeY)
	k <- 0
	for(i in 1:n){
		if(strtrim(x,i) != strtrim(y,i))
			break
		k <- k + 1
	}
	nMax <- max(sizeX,sizeY)
	if(k<2){
		simil<- 0
	}else{
		simil <- k/nMax
	}
	simil
}

string.jaccard <- function(string1,string2)
{
	x <- toString(string1)
	y <- toString(string2)
	sizeX <- nchar(x)
	sizeY <- nchar(y)
	n <- max(sizeX,sizeY)
	m <- min(sizeX,sizeY)
	i <- 1
	k <- 1
	union <- 0
	inter <- 0
	while(i <= sizeX && k <= sizeY)
	{
		if(i <= sizeX && k <= sizeY && substr(x,i,i) == substr(y,k,k))
		{
			inter <- inter + 1
			union <- union + 1
			i <- i+1
			k <- k + 1
		}
		else if(i <= sizeX && k <= sizeY && substr(x,i,i) < substr(y,k,k) || k>sizeX)
		{
			union <- union + 2
			i <- i + 1
			k <- k + 1
		}else if(i <= sizeX && k <= sizeY && substr(x,i,i) > substr(y,k,k) || i > sizeY)
		{
			union <- union + 2
			k <- k + 1
			i <- i + 1
		}
	}
	simil <- inter / union
	simil
}
png(width=600,height=600)
par(mar=c(3,8,1,1),family="serif")
#setwd("D:/work")  #working dir
library(igraph)     
library(proxy)       
library(lattice)     
words=read.csv("int02_id.csv",header=FALSE,sep="\t")

opt.trial  <- function(words,threshold = 0.5)
{
	terms <- words$V1
	l <- TRUE
	clusters <- NULL
	for(t in terms)
	{
		while(l)
		{
			w <- sample(terms,size=1,replace = FALSE)
			sim <- string.simil(words_sorted[i],words_sorted[j])
			clusters <- rbind(clusters,data.frame(word=prototype,no=k))
			if(sim > thershold)
			{
			}
		}
	}
}

sort.data.frame <- function(x,key, ...)
{
	if (missing(key)) {
		rn <- rownames(x)
		if (all(rn %in% 1:nrow(x))) rn <- as.numeric(rn)
		x[order(rn, ...), , drop=FALSE]
	} else {
		x[do.call("order", c(x[key], ...)), , drop=FALSE]
	}
}

clean.opt <- function(words,threshold = 0.6)
{
	words_data_frame <- data.frame(words)
	words_sorted <- sort.data.frame(words_data_frame,"V2")
	compared <- NULL
	k <-1
	terms<- tolower(words_sorted$V2)
	index <- words_sorted$V1
	i <- 1
	while( i <= length(terms))
	{
		compared <- rbind(compared, data.frame(ind=index[i],term=terms[i]))
		l <- TRUE
		k <- i+1
		while(l)
		{
			if(string.simil(terms[i],terms[k]) <threshold)
			{
				l <- FALSE
				i <- k
			}
			else
			{
				compared <- rbind(compared,data.frame(ind=index[k],term = terms[i]))
				k <- k + 1
			}
		}
	}
	compared_original <- sort.data.frame(compared,"ind")
	write.csv(compared_original,"int02_id_CLEANED.csv",quote=FALSE,sep="\t",row.names=FALSE,col.names=FALSE)
}

clean <- function(words,threshold=0.5)
{
	compared <- list()
	for(i in 1:length(words$V2))
	{
		k <- 1
		l <- TRUE
		while(k <=length(compared) && l )
		{
			if(string.simil(compared[[k]],words$V2[i]) > threshold)
			{
				#l <- FALSE
				#z[[1]] <- toString(words$V2[i])
				#z[[2]] <- words$V1[i]
				#compared[[k]][[length(compared[[k]])+1]] <- z
			}
			k <- k + 1
		}
		if(l)
		{
			z <- list()
			z[[1]] <- toString(words$V2[i])
			z[[2]] <- words$V1[i]
			compared[[length(compared) +1]] <- list()
			compared[[length(compared)]][[1]] <- z
		}
	}
	compared
}
clean.words <-function(words,method="prefix",threshold=0.5)
{
	#words_sorted <- sort(words$V1)
	compared <- list()
	for(i in 1:length(words$V2))
	{
		k <- 1
		l <- TRUE
		while(k <=length(compared) && l )
		{
			#if(string.simil(compared[[k]],words$V2[i]) > threshold)
			{
				l <- FALSE
				z[[1]] <- words$V2[i]
				z[[2]] <- words$V1[i]
				compared[[k]][[length(compared[[k]])+1]] <- z
			}
			k <- k + 1
		}
		if(l)
		{
			z <- list()
			z[[1]] <- words$V2[i]
			z[[2]] <- words$V1[i]
			compared[[length(compared) +1]] <- list()
			compared[[length(compared)]][[1]] <- z
		}
	}

	for(i in 1:length(words_sorted))
	{
		for( j in 1:length(words_sorted))
		{
			if(method=="levenshtein"){
				similarities[i,j] <- levenshtein(words_sorted[i],words_sorted[j])
				if(similarities[i,j] >3)similarities[i,j] <- 0
			}
			#else if(method == "prefix")
				#similarities[i,j] <- string.simil(words_sorted[i],words_sorted[j])
			#else if(method == "jaccard")
			#	similarities[i,j] <- string.jaccard(words_sorted[i],words_sorted[j])
			#else
			#	stop("method not allowed")
		}
	}
	stop()
		diag(similarities) <- 0
		similarities[similarities<=threshold] <- 0
	clusters <- NULL
	k <- 1
	while(length(words_sorted!=0)){
		prototype <- sample(words_sorted,size=1,replace=FALSE)
		words_sorted <- words_sorted[words_sorted!=prototype]
		clusters <- rbind(clusters,data.frame(word=prototype,no=k))
		filt <-subset(similarities,select = prototype)
		sims<-subset(filt,filt>0)
		for(j in rownames(sims)){
			exists <- subset(clusters,word==j)
			if(length(exists$word)==0)
			{
				clusters <- rbind(clusters,data.frame(word=j,no=k))
				words_sorted <- words_sorted[words_sorted!=j]
			}
		}
		k <- k + 1
	}
	clusters
}

clean.prefix <- function(words)
{
	words_sorted <- sort(words$V1) #sort(words$terms)
	similarities <- matrix(nrow=length(words_sorted),ncol=length(words_sorted))
	colnames(similarities) <- words_sorted
	rownames(similarities) <- words_sorted
	for(i in 1:length(words_sorted))
	{
		for( j in 1:length(words_sorted)){
			similarities[i,j] <- string.simil(words_sorted[i],words_sorted[j])
		}
	}
	diag(similarities) <- 0
	similarities[similarities<=0.5] <- 0
#for(i in 1:length(words_sorted))
#{
#	index <- which(similarities[i,] == max(similarities[i,]))
#	maxVertex <- max(similarities[i,])
#	similarities[i,] <- 0
#	for(j in 1:length(index))
#		similarities[i,index[j]] <- maxVertex
#}
#for(i in 1:length(words_sorted))
#{
#	index <- which(similarities[i,] != 0)
#	for(j in 1:length(index)){
#		similarities[index[j],i] <- similarities[i,index[j]]
#	}
#}
#similGraph=graph.adjacency(similarities, mode="undirected", weighted=TRUE, diag=FALSE)
#similGraph=set.vertex.attribute(similGraph,"id",index=V(similGraph),words_sorted)
#plot(similGraph)
	clusters <- NULL
	k <- 1
	while(length(words_sorted!=0)){
		prototype <- sample(words_sorted,size=1,replace=FALSE)
		words_sorted <- words_sorted[words_sorted!=prototype]
		clusters <- rbind(clusters,data.frame(word=prototype,no=k))
		filt <-subset(similarities,select = prototype)
		sims<-subset(filt,filt>0)
		for(j in rownames(sims)){
			exists <- subset(clusters,word==j)
			if(length(exists$word)==0){
				clusters <- rbind(clusters,data.frame(word=j,no=k))
				words_sorted <- words_sorted[words_sorted!=j]
			}
		}
		k <- k + 1
	}
	clusters
}


clean.jaccard <- function(words)
{
	words_sorted <- sort(words$terms) #sort(words$terms)
	similarities <- matrix(nrow=length(words_sorted),ncol=length(words_sorted))
	colnames(similarities) <- words_sorted
	rownames(similarities) <- words_sorted
	for(i in 1:length(words_sorted))
	{
		for( j in 1:length(words_sorted)){
			similarities[i,j] <- string.jaccard(words_sorted[i],words_sorted[j])
		}
	}
	diag(similarities) <- 0
	similarities[similarities<=0.5] <- 0
	clusters <- NULL

	k <- 1
	while(length(words_sorted!=0)){
		prototype <- sample(words_sorted,size=1,replace=FALSE)
		words_sorted <- words_sorted[words_sorted!=prototype]
		clusters <- rbind(clusters,data.frame(word=prototype,no=k))
		filt <-subset(similarities,select = prototype)
		sims<-subset(filt,filt>0)
		for(j in rownames(sims)){
			exists <- subset(clusters,word==j)
			if(length(exists$word)==0){
				clusters <- rbind(clusters,data.frame(word=j,no=k))
				words_sorted <- words_sorted[words_sorted!=j]
			}
		}
		k <- k + 1
	}
	clusters
}

clean.levenshtein <- function(words)
{
	words_sorted <- as.vector(sort(words$terms)) #sort(words$terms)
	similarities <- matrix(nrow=length(words_sorted),ncol=length(words_sorted))
	colnames(similarities) <- words_sorted
	rownames(similarities) <- words_sorted
	for(i in 1:length(words_sorted))
	{
		for( j in 1:length(words_sorted)){
			similarities[i,j] <- levenshtein(words_sorted[i],words_sorted[j])
		}
	}
	diag(similarities) <- 0
	similarities[similarities>3] <- 0
	clusters <- NULL
	k <- 1
	while(length(words_sorted!=0)){
		prototype <- sample(words_sorted,size=1,replace=FALSE)
		words_sorted <- words_sorted[words_sorted!=prototype]
		clusters <- rbind(clusters,data.frame(word=prototype,no=k))
		filt <-subset(similarities,select = prototype)
		sims<-subset(filt,filt>0)
		for(j in rownames(sims))
		{
			exists <- subset(clusters,word==j)
			if(length(exists$word)==0)
			{
				clusters <- rbind(clusters,data.frame(word=j,no=k))
				words_sorted <- words_sorted[words_sorted!=j]
			}
		}
		k <- k + 1
	}
	clusters
}

clean.cit <- function(filename1="int02_citing.csv",filename2="int02_cited_InJournal.csv")
{
	desc_citing <- read.csv(filename1,header=FALSE)
	desc_cited <- read.csv(filename2,header=FALSE)
	authors_citing <- desc_citing$V2
	authors_cited <- desc_cited$V2
	authors <- c(toupper(desc_citing$V2),toupper(desc_cited$V2))
	index <- c(desc_citing$V1,desc_cited$V1)
	i <- 1
	compared <- NULL
	while(i<=length(authors))
	{
		l <- TRUE
		j <- 1
		while(l && j <= length(compared$author))
		{
			if(simil.levenshtein(authors[i],compared$author[j])<2)
			{
				compared <- rbind(compared,data.frame(ind=index[i],author=compared$author[j]))
				l <- FALSE
			}
			j <- j + 1
		}
		if(l)
		{
			compared <- rbind(compared,data.frame(ind=index[i],author=authors[i]))
		}
		i <- i + 1
	}
	outfile1 <- data.frame(ind=compared$ind[1:length(authors_citing)],author=compared$author[1:length(authors_citing)])
	outfile2 <- data.frame(ind=compared$ind[(length(authors_citing) +1):length(compared$author)],author=compared$author[(length(authors_citing)+1):length(compared$author)])
	write.csv(outfile1,"int02_citing_CLEANED.csv",quote=FALSE,sep="\t",row.names=FALSE,col.names=FALSE)
	write.csv(outfile2,"int02_cited_InJournal_CLEANED.csv",quote=FALSE,sep="\t",row.names=FALSE,col.names=FALSE)
}

clean.authors <- function(fileName="int02_au.csv")
{
	desc <- read.csv(fileName,header=FALSE,sep="\t")
	desc_sorted <- sort.data.frame(desc,"V2")
	authors <- desc_sorted$V2
	authors <- toupper(authors)
	index <- desc_sorted$V1
	i <- 1
	k <- 1
	compared <- NULL
	while(i <=length(authors))
	{
		l <- TRUE
		j <- 1
		while(l && j <= length(compared$author))
		{
			if(simil.authors(authors[i],compared$author[j]))
			{
				compared <- rbind(compared,data.frame(ind=index[i],author=compared$author[j]))
				l <- FALSE
			}
			j <- j + 1
		}
		if(l)
		{
			compared <- rbind(compared,data.frame(ind=index[i],author=authors[i]))
		}
		i <- i + 1
	}
	comp_orig <- sort.data.frame(compared,"ind")
	write.csv(comp_orig,"int02_au_CLEANED.csv",quote=FALSE,sep="\t",row.names=FALSE,col.names=FALSE)
}
cluster.names <- function(fileName="int")
{  
	description=read.csv(fileName,header=TRUE,sep=";")
	authors <- description$author
	coauthors <- description$co.author
	names <- c(as.vector(authors),as.vector(coauthors))
	names <- names[names != ""]
	authorMatrix <- matrix(nrow=length(names),ncol=length(names))
	rownames(authorMatrix) <- names
	colnames(authorMatrix) <- names
	similMatrix <- matrix(nrow=length(names),ncol=length(names))
	rownames(similMatrix) <- names
	colnames(similMatrix) <- names
	for(i in 1:length(names))
	{
		for(j in 1:length(names))
		{
			sim <- simil.complex(names[i],names[j])
			if(sim == 2)
			{
				if(i>length(authors) && j > length(authors))
				{
					similMatrix[i,j] = check.co.authors(names[i],names[j],FALSE,FALSE,description)
				}
				if(i>length(authors) && j <= length(authors))
				{	
					similMatrix[i,j] = check.co.authors(names[i],names[j],FALSE,TRUE,description)
				}	
				if(i<=length(authors) && j <= length(authors))
				{
					similMatrix[i,j] = check.co.authors(names[i],names[j],TRUE,TRUE,description)
				}
				if(i<=length(authors) && j > length(authors))
				{
					similMatrix[i,j] = check.co.authors(names[i],names[j],TRUE,FALSE,description)
				}
			}else
			{
				similMatrix[i,j] <- sim
			}
		}
	}

	similGraph=graph.adjacency(similMatrix, mode="undirected", weighted=TRUE, diag=FALSE)
	components <- decompose.graph(similGraph)
	name_clusters <- NULL
	c <- 1
	for ( i in 1:length(components))
	{
		adj<-get.adjacency(components[[i]])
		authors <- rownames(adj)
		while(length(authors != 0))
		{
			name <- sample(authors,1,replace=FALSE)
			authors <- authors[authors != name]
			name_clusters <- rbind(name_clusters,data.frame(name=name,cluster=c))
			x <- subset(adj,select=toString(name))
			x <- subset(x,x==1)
			for(j in rownames(x))
			{
				exists<- subset(name_clusters,name==j)
				if(length(exists$name)==0)
				{
					name_clusters <- rbind(name_clusters,data.frame(name=j,cluster=c))
					authors <- authors[authors != j]
				}
			}
			c <- c + 1
		}
	}
	name_clusters
}

create.name.graph <- function(fileName="authors.csv",name_clusters)
{
	png(width=600,height=600)
description=read.csv(fileName,header=TRUE,sep=";")
mergedGraph <- data.frame()
s <- NULL
for(i in 1:length(description$author))
{
	r <- subset(name_clusters,name==toString(description$author[i]))
	r3 <- subset(name_clusters,name==toString(description$co.author[i]))
	if(length(mergedGraph)!=0){
		s <- subset(mergedGraph,c1==r$cluster & c2==r3$cluster)
	}
	if(length(s$author) == 0 && as.vector(description$co.author[i] != ""))
	{
			if(length(r3$cluster) == 0)
				mergedGraph <- rbind(mergedGraph,data.frame(author=description$author[i],co.author=description$co.author[i],c1=r$cluster,c2=0))
			else{
				if(length(mergedGraph) != 0){
					s <- subset(mergedGraph,c1 == r$cluster | c2 == r3$cluster)
					if(length(s$author)!= 0 && as.vector(description$co.author[i] != "")){
						if(s$c1 == r$cluster)
						{
							mergedGraph <- rbind(mergedGraph,data.frame(author=s$author,co.author=description$co.author[i],c1=s$c1,c2=r3$cluster))
						}
						if(s$c2 == r3$cluster)
						{
							mergedGraph <- rbind(mergedGraph,data.frame(author=description$author[i],co.author=s$co.author,c1=r$cluster,c2=s$c2))
						}
					}else
						mergedGraph <- rbind(mergedGraph,data.frame(author=description$author[i],co.author=description$co.author[i],c1=r$cluster,c2=r3$cluster))
				}else
					mergedGraph <- rbind(mergedGraph,data.frame(author=description$author[i],co.author=description$co.author[i],c1=r$cluster,c2=r3$cluster))
			}
	}
	
}
mg <- graph.data.frame(mergedGraph,directed = FALSE)
plot(mg,vertex.color="green",vertex.size=40,vertex.label=c(unique(as.vector(mergedGraph$author)),unique(as.vector(mergedGraph$co.author))))
dev.off()
mg
}library(plotrix)
library(igraph)
	
sort.data.frame <- function(x,key, ...)
{
tryCatch({
	if (missing(key)) {
		rn <- rownames(x)
		if (all(rn %in% 1:nrow(x))) rn <- as.numeric(rn)
		x[order(rn, ...), , drop=FALSE]
	} else {
		x[do.call("order", c(x[key], ...)), , drop=FALSE]
	}
},error=function(ex){print("error")})
}

szeletel <- function(filename1="int02_id_CLEANED.csv",filename2="int02_py.csv",time.cut=5,cut=c("intentionality","INTENTIONALITY"))
{
tryCatch({
	t1=read.csv2(filename1,header=T,sep=";")
	t2=read.csv2(filename2,header=F,sep=";")
	evek=sort(unique(t2$V2))
	felbont=cut(evek,time.cut)
	period=as.data.frame(cbind(evek,as.vector(felbont)))
	colnames(period)=c("evek","period")
	t1m=merge(t1,t2,by.x="record",by.y="V1")
	colnames(t1m)=c("record","term","evek")
	t1p=merge(t1m,period,by.x="evek",by.y="evek")
	idok=split(t1p,t1p$period)
	stat=NULL
	graphs <- NULL
	k <- 0
	for (i in 1:length(idok)) 
	{
		if(length(idok[[i]]$term) > 0)
		{
			idok[[i]]$term=as.character(idok[[i]]$term)
			td=table(idok[[i]]$term,idok[[i]]$record)
			d=dist(td, method = "binary")
			d=as.matrix(d)
			w=1-d
			g=graph.adjacency(w, mode="undirected", weighted=T, diag=F, add.colnames=NULL)
			g$year <- idok[[i]]$evek[1]
			#g$year <- as.vector(idok[[i]]$period[1])
			g$last.year <- idok[[i]]$evek[length(idok[[i]]$evek)]
			g$period <- idok[[i]]$period[1]
			g <- set.vertex.attribute(g,"id",index=V(g),colnames(w))
			for(c in cut)
			{
				sub=subset(V(g),!V(g)$id==c)
				g <- subgraph(g,sub)
			}
			graphs[[k <- k + 1]] <- g
		}
	}	
	graphs
	},error=function(ex){print("error")})
}

sanyi.fuggveny <- function(filename1 ="au_career.csv",filename2="py_career.csv")
{
tryCatch({
	t1=read.csv2(filename1,header=T)
	t2=read.csv2(filename2,header=F)
	evek=unique(t2$V2)
	felbont=cut(evek,6)
	period=as.data.frame(cbind(evek,as.vector(felbont)))
	colnames(period)=c("evek","period")
	t1m=merge(t1,t2,by.x="record",by.y="V1")
	colnames(t1m)=c("record","au","evek")
	t1p=merge(t1m,period,by.x="evek",by.y="evek")
	idok=split(t1p,t1p$period)
	stat=NULL
	png(width=600,height=600,filename=paste("sorozat",".png"))
	par(mfrow=c(2,3),mar=c(3,0,3,0))
	for (i in 1:length(idok)) 
	{
		idok[[i]]$au=as.character(idok[[i]]$au)
		td=table(idok[[i]]$au,idok[[i]]$record)
		d=dist(td, method = "binary")
		d=as.matrix(d)
		w=1-d
		g=graph.adjacency(w, mode="undirected", weighted=T, diag=F, add.colnames=NULL)
		V(g)$komp=clusters(g,mode="weak")$membership
		sort(table(V(g)$komp),decreasing=T)->kompmeret
		summary(kompmeret[kompmeret>2])[5]->hatar
		kompmeret[kompmeret>=hatar]->kompmeret
		as.numeric(names(kompmeret))->kompmeret
		v=NULL
		for (m in 1:length(V(g))) 
		{
			v0=any(kompmeret==V(g)$komp[m])
			v=append(v,v0)
		}
		V(g)$kompmeret=v
		kell=subset(V(g),V(g)$kompmeret==T)
		cog=subgraph(g,kell)
		kompok=decompose.graph(cog,mode="weak",min.vertices = 3)
		dens=NULL
		bw=NULL
		for (k in 1:length(kompok)) 
		{
			dens0=graph.density(kompok[[k]])
			bw0=mean(betweenness(kompok[[k]]))
			dens=append(dens,dens0)
			bw=append(bw,bw0)
		}

		a=clusters(cog,mode="weak")$no
		#b=max(clusters(cog,mode="weak")$csize)
		#c=mean(clusters(cog,mode="weak")$csize)
		d=mean(E(cog)$weight)
		#e=mean(V(cog)$fokszam)
		f=mean(dens)
		h=mean(bw)
		stat0=c(a,d,f,h)
		stat=rbind(stat,stat0)
	
		plot(cog
			,layout=layout.fruchterman.reingold(cog,niter=200,area=vcount(cog)^3)
			,axes=T
			,vertex.label=""
			,edge.color="green3"
			,main=rownames(summary(idok))[i]
			,vertex.size=2
			,vertex.color=V(cog)$komp
			,vertex.shape="square"
			,edge.width=1.5
			,edge.label=""
			,asp=0.7
		)
	}
	dev.off()

	rownames(stat)=rownames(summary(idok))
	colnames(stat)=c("#clus","mean.weight","mean.dens","mean.bw")


	png(width=700,height=250,file="au_statistics.png")
	par(mar=c(3,6,3,2),mfrow=c(1,4),cex=1)
	for (t in c(1,2,3,4)) 
	{
		bp=barplot(stat[,t],main=colnames(stat)[[t]],names.arg=rownames(stat),col="white",border=T,horiz=T,las=2);
		lines(stat[,t],bp[,1],main="",type="o",col="red",lwd=2);
		grid()
	}
	dev.off()
	},error=function(ex){print("error")})
}

create.test <-function(graphs,year=2008,nodeDeleteNumber=20,nodeAddNumber=20,edgeDeleteNumber=50,edgeAddNumber=50)
{
tryCatch({
	graph <- graphs[[16]]
	new.graph.list <- list()
	for(i in 1:6)
	{
		nodes.to.delete <- sample(length(V(graph)),size=nodeDeleteNumber)
		graphn <- delete.vertices(graph,nodes.to.delete)
		edges.to.delete <- sample(length(E(graphn)),size=edgeDeleteNumber)
		graphn <- delete.edges(graphn,edges.to.delete)
		edges.to.add <- sample(length(V(graphn)),size=edgeAddNumber*2)
		graphn <- add.edges(graph,edges.to.add)
		new.graph.list[[i]] <- graphn 
	}
	new.graph.list
	},error=function(ex){print("error")})
}

test.broken.clusters <- function()
{
tryCatch({
	graphs <- NULL
	graphs[[1]] <- graph.full(64)
	size <- 32
	for(i in 1:6)
	{
		g <- NULL
		for(j in 1:64/size)
		{
			g[[j]] <- graph.full(size)
			
		}
	}
	},error=function(ex){print("error")})
}

bommarito <- function(graphs,years=NULL)
{
tryCatch({
	eigen.comm <- NULL
	betweenness.comm <- NULL
	fastgreedy.comm <- NULL
	walktrap.comm <- NULL
	average.comm.betweenness <- 0
	average.comm.fastgreedy <- 0
	average.comm.eigen <- 0
	stab.eigen <- 0
	stab.fastgreedy <- 0
	stab.betweenness <- 0
	y <- 0
	c <- 0
	first <- TRUE
	for(g in graphs)
	{
		y <- y + 1
		if(is.null(years) || length(years[years==g$year]) != 0)
		{
		c <- c + 1
		#print(paste("number: ", y))
		#print(paste("year: ",g$year))
		#print(paste("number of nodes: ",length(V(g))))
		eigen.matrix <- leading.eigenvector.community(g)
		betweenness.matrix <- edge.betweenness.community(g)
		fast.greedy.matrix <- fastgreedy.community(g)
		#walktrap.matrix  <- walktrap.community(g)
		ei <- NULL
		if(length(eigen.matrix$merges) !=0)
		{
			ei <- community.le.to.membership(eigen.matrix$merges, 0, eigen.matrix$membership)
			
		}else
		{	
			ei$membership <- rep(0,length(V(g)))
			ei$csize <- length(V(g))
		}
		bw <- community.to.membership(g,betweenness.matrix$merges,length(betweenness.matrix$merges[,1]),betweenness.matrix$membership)
		fg <- community.to.membership(g,fast.greedy.matrix$merges,length(fast.greedy.matrix$merges[,1]),fast.greedy.matrix$membership)
		
		
		eigen.comm[[y]] <- ei
		betweenness.comm[[y]] <- bw
		fastgreedy.comm[[y]] <- fg
		#print("community_detection_done")
		same.nodes.eigen <- data.frame()
		same.nodes.betweenness <- data.frame()
		same.nodes.fastgreedy <- data.frame()
		
		if(!first)
		{
			for(i in 0:(length(V(graphs[[y-1]]))-1))
			{
				for(j in i:(length(V(graphs[[y-1]]))-1))
				{
					if(i != j && eigen.comm[[y-1]]$membership[i+1] == eigen.comm[[y-1]]$membership[j+1])
					{
						same.nodes.eigen <- rbind(same.nodes.eigen,data.frame(node1=V(graphs[[y-1]])[i]$id,node2=V(graphs[[y-1]])[j]$id))
					}
					if(i != j && betweenness.comm[[y-1]]$membership[i + 1] == betweenness.comm[[y-1]]$membership[j + 1])
					{
						same.nodes.betweenness <- rbind(same.nodes.betweenness,data.frame(node1=V(graphs[[y-1]])[i]$id,node2=V(graphs[[y-1]])[j]$id))
					}
					if(i != j && fastgreedy.comm[[y-1]]$membership[ i + 1 ] == fastgreedy.comm[[y-1]]$membership[j + 1])
					{
						same.nodes.fastgreedy <- rbind(same.nodes.fastgreedy,data.frame(node1=V(graphs[[y-1]])[i]$id,node2=V(graphs[[y-1]])[j]$id))
					}
				}
			}
			
			#print("last year nodes done")
			same.cluster.eigen <- 0
			same.cluster.betweenness <- 0
			same.cluster.fastgreedy <- 0
			#print(same.nodes.fastgreedy)
			#print(same.nodes.eigen)
			#print(same.nodes.betweenness)
			all.cluster.eigen <- length(same.nodes.eigen$node1)
			all.cluster.betweenness <- length(same.nodes.betweenness$node1)
			all.cluster.fastgreedy <- length(same.nodes.fastgreedy$node1)
			for(i in 1:length(same.nodes.eigen$node1))
			{
				node1.this.time <- which(V(g)$id == toString(same.nodes.eigen$node1[i]))
				node2.this.time <- which(V(g)$id == toString(same.nodes.eigen$node2[i]))
				if(length(node1.this.time) != 0 && length(node2.this.time) != 0)
				{
					if(eigen.comm[[y]]$membership[node1.this.time] == eigen.comm[[y]]$membership[node2.this.time])
					{
						same.cluster.eigen <- same.cluster.eigen + 1
					}
				}
			}
			
			print("Eigen vector done")
			for(i in 1:length(same.nodes.betweenness$node1))
			{
				node1.this.time <- which(V(g)$id == toString(same.nodes.betweenness$node1[i]))
				node2.this.time <- which(V(g)$id == toString(same.nodes.betweenness$node2[i]))
				if(length(node1.this.time) != 0 && length(node2.this.time) != 0)
				{
					if(betweenness.comm[[y]]$membership[node1.this.time] == betweenness.comm[[y]]$membership[node2.this.time])
					{
						same.cluster.betweenness <- same.cluster.betweenness + 1
					}
				}
			}
			print("betweenness done")
			
			for(i in 1:length(same.nodes.fastgreedy$node1))
			{
				node1.this.time <- which(V(g)$id == toString(same.nodes.fastgreedy$node1[i]))
				node2.this.time <- which(V(g)$id == toString(same.nodes.fastgreedy$node2[i]))
				if(length(node1.this.time) != 0 && length(node2.this.time) != 0)
				{
					if(fastgreedy.comm[[y]]$membership[node1.this.time] == fastgreedy.comm[[y]]$membership[node2.this.time])
					{
						same.cluster.fastgreedy <- same.cluster.fastgreedy + 1
					}
				}
			}
			print("fast greedy done")
			print(g$year)
			print(same.cluster.eigen)
			print(all.cluster.eigen)
			print(stab.eigen)
			print(same.cluster.betweenness)
			print(all.cluster.betweenness)
			print(stab.betweenness)
			print(same.cluster.fastgreedy)
			print(all.cluster.fastgreedy)
			print(stab.fastgreedy)
			stab.eigen <- stab.eigen + same.cluster.eigen / all.cluster.eigen
			stab.betweenness <- stab.betweenness + same.cluster.betweenness / all.cluster.betweenness
			stab.fastgreedy <- stab.fastgreedy + same.cluster.fastgreedy / all.cluster.fastgreedy
		}
		first <- FALSE
		average.comm.betweenness <- average.comm.betweenness + length(bw$csize)
		average.comm.fastgreedy <- average.comm.fastgreedy + length(fg$csize)
		average.comm.eigen <- average.comm.eigen + length(ei$csize)
		}
	}
	stab.eigen <- stab.eigen / y
	stab.betweenness <- stab.betweenness/ y
	stab.fastgreedy <- stab.fastgreedy / y
	average.comm.betweenness <- average.comm.betweenness/y
	average.comm.fastgreedy <- average.comm.fastgreedy/y
	average.comm.eigen <- average.comm.eigen/y
	x <- NULL
	x[1] <- stab.eigen
	x[2] <- stab.betweenness
	x[3] <- stab.fastgreedy
	z <- NULL
	z[1] <- average.comm.eigen
	z[2] <- average.comm.betweenness
	z[3] <- average.comm.fastgreedy
	print(x)
	print(z)
	plot(x,z,col=c("green","blue","red"))
	print(average.comm.betweenness)
	print(average.comm.fastgreedy)
	print(average.comm.eigen)
	print(stab.betweenness)
	print(stab.fastgreedy)
	print(stab.eigen)
	},error=function(ex){print("error")})
}

statistic.based.dynamic.skeleton <- function(graphs,years=NULL,method="eigenvector",show.clusters=TRUE,cluster.limit = 5,th = 0.04,colors=TRUE)
{
tryCatch({
	shift <- 0.1
	if(is.null(years))ys <- length(graphs)
	else ys <- length(years)
	z <- 0
	spanw <- 1/ys
	results <- NULL
	for( g in 1:length(graphs))
	{
		if(is.null(years) || length(years[years == graphs[[g]]$year]) != 0)
		{
			memb <- rep(1,length(V(graphs[[g]])))
			clusno <- 1
			csize <- length(V(graphs[[g]]))
			merge.matrix <- NULL
			if(method == "eigenvector")
			{
				print(graphs[[g]])
				merge<- leading.eigenvector.community(graphs[[g]])
				merge.matrix <- merge$merge
				if(length(merge.matrix[,1]) > (cluster.limit -1))
					steps <- length(merge.matrix[,1]) - (cluster.limit - 1)
				else
					steps <- 1
				if(length(merge.matrix) != 0)
				communities <- community.le.to.membership(merge.matrix,steps,merge$membership)
			}
			if(length(merge.matrix) != 0)
			{
				memb <- communities$membership + 1
				clusno <- length(communities$csize)
				csize <- communities$csize
			}
			spanh <- 1/clusno
			xpos <- NULL
			ypos <- NULL
			rad <- NULL
			radius <- 0.001
			if(is.null(results))
			{
				for(c in 1:clusno)
				{
					xpos <- c(xpos,0)
					radnow <- 0.02 + 0.0005* csize[c]/10
					rad <- c(rad,radnow)
					ypos <- c(ypos,0 + radius +(c-1)*spanh)
					#ypos  <- c(ypos,0 + spanh)
				}
				res <- NULL
				res$memb <- memb
				res$csize <- csize
				res$year <- graphs[[g]]$year
				res$pos <- ypos + 0.02
				#res$colors <- lead.colors
				results[[z <- z+1]] <- res
				filename <- paste(paste("cluster_skeleton",unclass(Sys.time()),sep=""),".png",sep="")
				png(width=800,height=600,filename=filename)
				par(mar=c(1,1,1,1))
				plot.new()
				if(colors)
					col <- "green"
				else 
					col <- "grey"
				if(show.clusters)
					symbols(xpos + 0.02 + shift,ypos + 0.02,rad,inches=FALSE,add=TRUE,bg=col)
				text(shift,1,labels=graphs[[g]]$label,cex=1.2)
			}else
			{
				actualposes <- NULL
				d <- NULL
				spanh <- 1/clusno
				radius <- 	0.001
				if(colors)
					col <- rep(c("red","blue","yellow","grey","black","purple","orange","brown","white"),3)
				else 
					col <- rep("grey",50)
				for(c in 1:clusno)
				{
					rad <- 0.02 + 0.0005 * csize[c]/10
					if(c==1) d <- rad
					xpos <- 0+z*spanw
					ypos <- 0 + radius + (c-1)*spanh
					actualposes <- c(actualposes,ypos)
					if(show.clusters)
						symbols(xpos + 0.02 +shift,ypos + 0.02,rad,bg=col[g],inches=FALSE,add=TRUE)
					for(l in 1:length(results[[z]]$csize))
					{
						ind.curr <- which(memb == c)
						memb.this.year <- V(graphs[[g]])[ind.curr]$id
						ind.last.year <- which(results[[z]]$memb == l)
						memb.last.year <- V(graphs[[g-1]])[ind.last.year]$id
						inter <- intersect(memb.this.year,memb.last.year)
						uni <- max(csize[c],results[[z]]$csize[l])
						stat <- length(inter)/uni
						if(stat > th)
						{
							poses <- results[[z]]$pos[l]
							arrows(xpos-spanw + 0.02+shift,poses,xpos +0.02+shift,ypos + 0.02,code=2,lwd=3)
						}
					}
				}
				text(xpos +shift,1,labels=graphs[[g]]$label,cex=1.2)
				res <- NULL
				res$memb <- memb
				res$csize <- csize
				res$year <- graphs[[g]]$year
				res$pos <- actualposes + 0.02
				results[[z <- z+1]] <- res
			}
		}
	}
	dev.off()
	paste(paste(getwd(), "/",sep=""), filename,sep="")
	},error=function(ex){print("error")})
}

leadnode.based.cluster.skeleton <- function(graphs,years=NULL,method="eigenvector",lead.node="closeness",show.clusters=TRUE,cluster.limit=5,colors=TRUE)
{
tryCatch({
	shift <- 0.1
	filename <- paste(paste("cluster_skeleton",unclass(Sys.time()),sep=""),".png",sep="")
	png(width=800,height=600,filename=filename)
	result <- NULL
	k <- 0
	z <- 0
	g <- 0
	if(is.null(years))ys <- length(graphs)
	else ys <- length(years)
	spanw <- 1/ys
	if(is.null(show.clusters))stop("show.clusters must be boolean type")
	for(g in 1:length(graphs))
	{
		if(is.null(years) || length(years[years==graphs[[g]]$year]) != 0)
		{
			memb <- rep(1,length(V(graphs[[g]])))
			clusno <- 1
			csize <- length(V(graphs[[g]]))
			print(csize)
			print(g)
			if(method == "eigenvector")
			{
				merge<- leading.eigenvector.community(graphs[[g]])
				merge.matrix <- merge$merge
				if(length(merge.matrix[,1]) >cluster.limit-1)
					steps <- length(merge.matrix[,1]) - (cluster.limit-1)
				else
					steps <- 1
				if(length(merge.matrix) != 0)
				{
					communities <- community.le.to.membership(merge.matrix,steps,merge$membership)
				}
			}

			if(length(merge.matrix) != 0)
			{
				memb <- communities$membership + 1
				clusno <- length(communities$csize)
				csize <- communities$csize
			}
			if(lead.node == "betweenness")
			{
				graphs[[g]] <- set.vertex.attribute(graphs[[g]],"bw",value=betweenness(graphs[[g]],directed=FALSE))
			}else if(lead.node == "closeness")
			{
				graphs[[g]] <- set.vertex.attribute(graphs[[g]],"cl",value=closeness(graphs[[g]]))
			}
			if(!is.null(result))
			{
				leaders <- NULL
				actualposes <- NULL
				spanh <- 1/clusno
				if(colors)
					col <- rep(c("red","blue","yellow","grey","black","purple","orange","brown","white"),3)
				else
					col <- rep("grey",50)
				lead.col <- NULL
				nodes <- result[[length(result)]]$lead
				d <- NULL
				sp <- 0.001
				for(i in 1:clusno)
				{
					ind <- which(memb == i)
					n <- intersect(V(graphs[[g]])[ind]$id,V(graphs[[g-1]])[nodes]$id)
					oldCluster <- NULL
					for(j in n)
					{
						pos <- which(V(graphs[[g-1]])$id == j)
						l <- which(nodes == pos-1)
						oldCluster <- c(oldCluster,l)
					}
					rad <- 0.02 + 0.0005 * csize[i]/10
					if(i==1) d <- rad
					xpos <- 0+z*spanw
					ypos <- 0 + sp +(i-1)*spanh
					actualposes <- c(actualposes,ypos)
					if(show.clusters)
						symbols(xpos + 0.02+shift,ypos + 0.02,rad,bg=col[g],inches=FALSE,add=TRUE)
					
					v <- 0
					if(length(n) > 0)
					{
						arrowcol <- result[[length(result)]]$colors[oldCluster]
						poses <- result[[length(result)]]$pos[oldCluster]
						arrows(xpos-spanw + 0.02+shift,poses,xpos +0.02+shift,ypos + 0.02,col=arrowcol,code=2,lwd=3)
					}
				
					if(lead.node=="betweenness")
						lead <- sample(which(V(graphs[[g]])[ind]$bw == max(V(graphs[[g]])[ind]$bw)),1)
					else if(lead.node == "closeness")
					{
						c <- which(V(graphs[[g]])[ind]$cl == max(V(graphs[[g]])[ind]$cl))
						p <- c[1]
						lead <- ind[p]
					}
					u <- FALSE
					b <- 0
					for(j in n)
					{ 	
						b <- b + 1
						if(j == V(graphs[[g]])[lead]$id)
						{
							lead.col <- c(lead.col,arrowcol[b])
							u <- TRUE
						}
					}
					if(!u)
					{
						lead.col <- c(lead.col,sample(colors(),size=1))
					}
					leaders <- c(leaders,lead)
				}
				
				text(xpos+0.01 +shift,1,labels=graphs[[g]]$label,cex=1.2)
				res <- NULL
				res$memb <- memb
				res$csize <- csize
				res$lead <- leaders
				res$year <- graphs[[g]]$year
				res$pos <- actualposes + 0.02
				res$colors <- lead.col
				result[[k <- k+1]] <- res
			}
			else
			{
				leaders <- NULL
				spanh <- 1/clusno
				xpos <- NULL
				ypos <- NULL
				rad <- NULL
				sp <- 0.001
				for(i in 1:clusno)
				{
					ind <- which(memb == i)
					if(lead.node == "betweenness")
						lead <- sample(which(V(graphs[[g]])[ind]$bw == max(V(graphs[[g]])[ind]$bw)),1)
					else if(lead.node == "closeness")
					{
						#p <- sample(which(V(graphs[[g]])[ind]$cl == max(V(graphs[[g]])[ind]$cl)),1)
						c <- which(V(graphs[[g]])[ind]$cl == max(V(graphs[[g]])[ind]$cl))
						p <- c[1]
						lead <- ind[p]
						xpos <- c(xpos,0)
						radnow <- 0.02 + 0.0005* csize[i]/10
						rad <- c(rad,radnow)
						ypos <- c(ypos,0 + sp +(i-1)*spanh)
					}
					leaders <- c(leaders,lead)
				}
				if(colors)
					col <- "green"
				else
					col <- "grey"
				lead.colors <- sample(colors(),size=length(leaders))
				res <- NULL
				res$memb <- memb
				res$csize <- csize
				res$lead <- leaders
				res$year <- graphs[[g]]$year
				res$pos <- ypos + 0.02
				res$colors <- lead.colors
				result[[k <- k+1]] <- res
				plot.new()
				#col <- sample(colors(),size=1)
				#print(rad)
				#print("zutyu")
				if(show.clusters)
					symbols(xpos + 0.02+shift,ypos + 0.02,rad,inches=FALSE,add=TRUE,bg=col)
				text(shift,1,labels=graphs[[g]]$label,cex=1.2)
			}
			z <- z + 1	
		}	
		g <- g + 1
	}
	dev.off()
	paste(paste(getwd(), "/",sep=""), filename,sep="")
	},error=function(ex){print("error")})
}library(igraph)
library(proxy)

"+" <- function(...) UseMethod("+") 
"+.default" <- .Primitive("+") 
"+.character" <- function(...) paste(...,sep="") 
assign.values.to.nodes <- function(graphs,years=NULL,func="betweenness")
{
tryCatch({
	for(i in 1:length(graphs))
	{
		if(is.null(years) || length(years[years==graphs[[i]]$year]) != 0)
		{
			graph <- list()
			graph[[1]] <- graphs[[i]]
			for(f in func)
			{
				res <- do.call(f,graph)
				graphs[[i]] <- set.vertex.attribute(graphs[[i]],f,value=res)
			}
		}
	}
	graphs
	},error=function(ex){print("error")})
}

eigen <- function(graph)
{
tryCatch({
	res <- evcent(graph)
	res$vector
},error=function(ex){print("error")})	
}

pr.cent <- function(graph)
{
tryCatch({
	res <- page.rank(graph)
	res$vector
},error=function(ex){print("error")})
}

kleinberg <- function(graph)
{
tryCatch({
	res <- hub.score(graph)
	res$vector
},error=function(ex){print("error")})
}
# !!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!!! #

set.degree.attributes <- function(graphs,years=NULL,mode=c("all","out","in","total"),loops=TRUE)
{
tryCatch({
	for(i in 1:length(graphs))
	{
		if(is.null(years) || length(years[years==graphs[[i]]$year]) != 0)
		{
			graphs[[i]] <- set.vertex.attribute(graphs[[i]],"degree",value=degree(graphs[[i]],mode=mode,loops=loops))
		}
	}
	graphs
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

cut.irrelevant.nodes <- function(graphs,years=NULL,attr,th,cutmode="fix")
{
	tryCatch({
	if(length(attr) > length(th))
	{
		stop("not enough threshold value")
	}
	
	newgraphs <- NULL
	left <- NULL
	for(i in 1:length(graphs))
	{
		
		if(is.null(years) || length(years[years==graphs[[i]]$year]) != 0)
		{
			k <- 0
			newgraphs[[i]] <- graphs[[i]]
			for(a in attr)
			{
				attributes <- get.vertex.attribute(newgraphs[[i]],a)
				if(is.null(attributes))stop("this attribute is not set yet")
				if(cutmode == "fix")
				{
					k <- k + 1
					relevantNodes <- V(newgraphs[[i]])[attributes>th[k]]
				
				}else if(cutmode == "rate")
				{
					k <- k + 1
					relevantNodes <- V(newgraphs[[i]])[attributes>max(attributes) / th[k]]
				}
				else
				{
					stop("invalid cutmode parameter")
				}
				newgraphs[[i]] <- subgraph(newgraphs[[i]],relevantNodes)
			}
			nodes <-  length(V(graphs[[i]])) - length(V(newgraphs[[i]]))
			edges <- length(E(graphs[[i]])) - length(E(newgraphs[[i]]))
			stats <- NULL
			stats$nodes <- nodes
			stats$edges <- edges
			left[[i]] <- stats
			graph <- list()
			graph[[1]] <- newgraphs[[i]]
			for(a in attr)
			{
				newgraphs[[i]] <- set.vertex.attribute(newgraphs[[i]],a,value=do.call(a,graph))
			}
		}else 
		{
			newgraphs[[i]] <- graphs[[i]]
		}
	}
	result <- NULL
	result$graph <- newgraphs
	result$left <- left
	result
	},error=function(ex){print("error")})
}


# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

cut.irrelevant.attributes <- function(graphs,years=NULL,attr,th,cutmode="fix")
{
tryCatch({
	if(length(attr) > length(th))stop("not enough threshold value")
	for(i in 1:length(graphs))
	{
		if(is.null(years) || length(years[years==graphs[[i]]$year]) != 0)
		{
			k <- 0
			for(a in attr)
			{
				
				attributes <- get.vertex.attribute(graphs[[i]],a)
				if(is.null(attributes))stop("this attribute is not set yet")
				if(cutmode == "fix")
				{
					k <- k + 1
					graphs[[i]] <- set.vertex.attribute(graphs[[i]],a,index=V(graphs[[i]])[attributes<th[k]],value=0)
				}
				else if(cutmode == "rate")
				{
					k <- k + 1
					graphs[[i]] <- set.vertex.attribute(graphs[[i]],a,index=V(graphs[[i]])[attributes<max(attributes)/th[k]],value=0)
				}
				else
				{
					stop("invalid cutmode parameter")
				}
			}
		}
	}
	graphs
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

dynamic.node.statistics <- function(graphs,years=NULL,attr,th=NULL,cutmode="rate")
{
tryCatch({
	cut <- TRUE
	if(!is.null(th) && cutmode=="rate" && th<=1)stop("threshold value must be bigger than 1")
	attrtable <- NULL
	ys <- NULL
	d <- FALSE
	for (graph in graphs) 
	{
		if(!is.igraph(graph))stop("not a graph object")
		if(is.null(years) || length(intersect(years,graph$interval)) != 0)
		{
			ys <- c(ys,graph$year)
			attribute <- get.vertex.attribute(graph,attr)
			if(is.null(attribute)) stop("this attribute is not set yet")
			if(is.null(th))
			{
				if(cut)
				{
					relevantNodes <- V(graph)[attribute>summary(attribute)[[4]]]
					newgraph <- subgraph(graph,relevantNodes)
					bp_filtered=attribute[attribute>summary(attribute)[[4]]]
					names(bp_filtered) <- V(newgraph)$id
				}
				else
				{
					names(attribute) <- V(graph)$id
					bp_filtered=attribute[attribute>summary(attribute)[[4]]]
				}
			}
			else
			{
				if(cut)
				{
					if(cutmode == "rate")
					{
						names(attribute) <- V(graph)$id
						relevantNodes <- V(graph)[attribute>(max(attribute)/th)]
						newgraph <- subgraph(graph,relevantNodes)
						bp_filtered <- attribute[attribute>(max(attribute)/th)]
						
					}else if(cutmode == "fix")
					{
						relevantNodes <- V(graph)[attribute>th]
						newgraph <- subgraph(graph,relevantNodes)
						bp_filtered=attribute[attribute>th]
						names(bp_filtered) <- V(newgraph)$id
					}
					else
					{
						stop("invalid cutmode")
					}
				}
				else
				{
					if(cutmode == "rate")
					{
						names(attribute) <- V(graph)$id
						bp_filtered <- attribute[attribute>(max(attribute)/th)]
					}else if(cutmode == "fix")
					{
						names(attribute) <- V(graph)$id
						bp_filtered=attribute[attribute>th]
					}
				}
			}
			
			if(length(bp_filtered) != 0)
			{
				d <- TRUE
				bp_filtered_sorted=sort(bp_filtered,decreasing=TRUE);
				uj=data.frame(names(bp_filtered_sorted),bp_filtered_sorted,graph$year)
				attrtable=rbind(attrtable,uj)
			}
				
		}
	}
	centtab <- NULL
	if(d)centtab=xtabs(bp_filtered_sorted~names.bp_filtered_sorted.+graph.year,data=attrtable)
	centtab
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

plot.dynamic.node.statistics <- function(graphs,years=NULL,attr,th=NULL,cutmode="rate",ranked=TRUE,plotmode="hist",log=FALSE)
{
tryCatch({	
	attrtable <- dynamic.node.statistics(graphs,years,attr,th,cutmode)	
	years <- as.numeric(colnames(attrtable))
	allys <- NULL
	c <- 1
	periods <- NULL
	lastyears <- NULL
	a <- 0
	for(g in graphs)
	{
		allys <- c(allys,g$year)
	}	
	l <- NULL
	newColor <- "green"
	colors <- data.frame(year=years,color = sample(colors(),size=length(years),replace=FALSE)) 
	oldVertices <- NULL
	actualColors <- NULL
	newVertex <- NULL
	weights <- NULL
	filenames <- NULL
	n <- 0
	f <- 0
	periods <- NULL
	for(y in years)
	{
		period <- NULL
		for(g in graphs)
		{
			if(any(g$interval == y))
			{
				period$l <- g$label
				period$i <- g$interval
				break
			}
		}
		periods[[f <- f+1]] <- period
		verticesInYear <- NULL
		centFrame <- data.frame(attrtable)
		centFrame <- data.frame(content = centFrame$names.bp_filtered_sorted.,year=centFrame$graph.year,cent=centFrame$Freq)
		centInYear <- subset(centFrame,year==y,select=c(content,cent))
		centNonZero <- subset(centInYear,cent>0,select=c(content,cent))
		actualColors <- NULL
		centOrderedNodes <- centNonZero[sort.list(centNonZero$cent),]
		if(ranked)
		{
			terms <- centOrderedNodes
		}
		else
		{
			terms <- centNonZero
		}
		for(j in 1:length(terms$content)){
			if(!is.null(oldVertices))
				newVertex <- subset(oldVertices,content==terms$content[j],select=content)
			if(length(newVertex$content) == 0){
				oldVertices <- rbind(oldVertices,data.frame(content=terms$content[j],year=y,age=1,weight=terms$cent[j]))
				actualColors <- c(actualColors,newColor)
			}else{
				Id <- which(oldVertices$content==terms$content[j])
				oldVertices$age[Id] = oldVertices$age[Id] + 1
				oldVertices$weight[Id] = oldVertices$weight[Id] + oldVertices$age[Id]*terms$cent[j]
				oldyear <- as.numeric(subset(oldVertices,content == terms$content[j],select=year))
				col <- subset(colors,year==oldyear,select=color)
				actualColors <- c(actualColors,toString(col$color))
				verticesInYear <- c(verticesInYear,oldyear)  
			}
			ordinate <- terms$content
			absciss <- terms$cent  
		}
		if(plotmode=="hist")
		{
			if(ranked)
			{
				filename <- attr + "Dist_" + period$l + "_" +unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(mar=c(3,8,1,1),family="serif",mfrow=c(1,1))
				barplot(height=absciss,names.arg=ordinate,horiz=TRUE,las=2,cex.names=1,cex.axis=0.5,col=actualColors,main=paste(paste(paste("distribution for the node attribute: ",attr)," in the year "), period$l))
			}
			else
			{
				
				filename <- attr + "Dist_" + period$l + "_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(mar=c(3,8,1,1),family="serif",mfrow=c(1,1))
				barplot(height=absciss,names.arg=ordinate,legend.text=verticesInYear,horiz=TRUE,las=2,cex.names=1,cex.axis=0.5,col=actualColors,main=paste(paste(paste("distribution for the node attribute: ",attr)," in the year "), period$l))
			}
		}else if(plotmode == "point")
		{
			if(log)
			{
				filename <- attr + "_log_Dist_" + period$l + "_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				plot(x=1:length(absciss),y=rev(absciss), type='p',log="xy",main=paste(paste(paste("log distribution for the node attribute: ",attr)," in the year "), period$l),ylab=paste(attr,"scores"))
			}
			else
			{
				filename <- attr + "Dist_" + period$l + "_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(family="serif",mfrow=c(1,1))
				plot(x=1:length(absciss),y=rev(absciss),type='p',main=paste(paste(paste("distribution for the node attribute: ",attr)," in the year "), period$l),xlab="nodes",ylab=paste(attr,"scores"))	
			}
		}
		else
		{
			stop("invalid plotmode")
		}
		dev.off()
		#filenames <- c(filenames,filename)
		t <- NULL
		t$year <- y
		t$filename <- filename
		l[[n <- n+1]] <- t
	}
	if(is.null(l))return(rep("NaP",length(allys)))
	i <- 1
	for(y in allys)
	{
		if(y == l[[i]]$year)
		{
			filenames <- c(filenames,l[[i]]$filename)
			i <- i+1
		}
		else if(y > l[[i]]$year)
		{
			
		}
		else if(y < l[[i]]$year)
		{
			filenames <- c(filenames, "NaP")
		}
	}
	paste(paste(getwd(), "/",sep=""), filenames,sep="")
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

vertex.betweenness.statistics <- function(graphs,years=NULL,th=NULL,cutmode="rate")
{
tryCatch({
	vertex.centrality.statistics(graphs,years,method="betweenness",th,cutmode)
},error=function(ex){print("error")})
}
	
# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.betweenness.statistics <- function(graphs,years=NULL,th=8,ranked=TRUE,cutmode="rate",plotmode="hist",log=FALSE)
{
tryCatch({
	plot.centrality.statistics(graphs,years,method="betweenness",th,ranked,cutmode,plotmode,log)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	cdn.statistics <- function(tab,th=5)
	{
	tryCatch({
		if(is.null(tab))return(NULL)
		years <- as.numeric(colnames(tab))
		oldVertices <- NULL
		newVertex <- NULL
		weights <- NULL
		centralities <- NULL
		bwFrame <- data.frame(tab)
		bwFrame <- data.frame(content = bwFrame$names.bp_filtered_sorted.,year=bwFrame$graph.year,bw=bwFrame$Freq)
		for(y in years)
		{
			verticesInYear <- NULL
			bwInYear <- subset(bwFrame,year==y,select=c(content,bw))
			bwNonZero <- subset(bwInYear,bw>0,select=c(content,bw))
			for(j in 1:length(bwNonZero$content)){
				if(!is.null(oldVertices))
					newVertex <- subset(oldVertices,content==bwNonZero$content[j],select=content)
				if(length(newVertex$content) == 0){
					oldVertices <- rbind(oldVertices,data.frame(content=bwNonZero$content[j],year=y,age=1,weight=bwNonZero$bw[j]))
				}else{
					Id <- which(oldVertices$content==bwNonZero$content[j])
					oldVertices$age[Id] = oldVertices$age[Id] + 1
					oldVertices$weight[Id] = oldVertices$weight[Id] + oldVertices$age[Id]*bwNonZero$bw[j]
					oldyear <- as.numeric(subset(oldVertices,content == bwNonZero$content[j],select=year))
					verticesInYear <- c(verticesInYear,oldyear)  
				}
			}
		}
		winner <- max(oldVertices$weight)
		centralities[[1]] <- subset(oldVertices,weight>winner/th)
		centralities[[2]] <- years
		centralities
	},error=function(ex){print("error")})
	}
	
# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	betweenness.cdn.statistics <- function(graphs,years=NULL,staticth=8,dynamicth=5,cutmode="rate")
	{
	tryCatch({
		if(staticth <= 1) stop("static threshold must be bigger than 1")
		bwtab <- vertex.betweenness.statistics(graphs,years,th=staticth,cutmode=cutmode)
		cdn.statistics(bwtab,dynamicth)
	},error=function(ex){print("error")})
	}

	# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	cdn.betweenness.stability <- function(graphs,years=NULL,staticth=8,dynamicth=5,cutmode="rate")
	{
	tryCatch({
		if(staticth <= 1) stop("static threshold must be bigger than 1")
		centralities <- betweenness.cdn.statistics(graphs,years,staticth,dynamicth,cutmode)
		get.cdn.stability(graphs,centralities)
	},error=function(ex){print("error")})
	}	

	# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	get.cdn.stability <- function(graphs,centralities)
	{
	tryCatch({
		stability.scores <- NULL
		years <-  centralities[[2]]
		centralities <- centralities[[1]]
		allNeighbors <- NULL
		g <- 0
		for(graph in graphs)
		{
			if(is.null(years) || length(years[years==graph$year]) != 0)
			{
				for(c in 1:(length(centralities$content)+1))
				{ 
					id <- which(V(graph)$id==centralities$content[c])
					if(length(id) != 0){
						neighbors <- neighbors(graph,id-1)
						neighborsText <- NULL
						weights <-  NULL
						for(i in 1:length(neighbors))
						{
							neighborsText <- c(neighborsText,V(graph)$id[neighbors[i]+1])
							weights <- c(weights,E(graph,P=c(id-1,neighbors[i]))$weight)
						}	
						cent <- NULL
						cent[1:length(neighbors)] <- toString(centralities$content[c])
						allNeighbors <- rbind(allNeighbors,data.frame(cent,neighborsText,graph$year,weights))
					}     
				}
			}	
		}
		stability <- NULL
		jaccards <- NULL
		jaccards2 <- NULL
		i <- 0
		for(c in 1:length(centralities$content))
		{	
			contentCounter <- NULL
			filteredByContent <- subset(allNeighbors,cent == toString(centralities$content[c]),select=c(neighborsText,graph.year,weights))	
			#contentTab <- table(filteredByContent$cent,filteredByContent$neighborsText)
			diversities <- NULL
			for(i in 1:length(filteredByContent$neighborsText))
			{
				item <- subset(contentCounter,contentCounter$content == toString(filteredByContent$neighborsText[i]))
				if(length(item$content)==0){
					contentCounter <- rbind(contentCounter,data.frame(content = toString(filteredByContent$neighborsText[i]),count = 1,weight=filteredByContent$weights[i],lastWeight=filteredByContent$weights[i],diversity=0,monotonity=0))
				}else{
					id <- which(contentCounter$content == toString(filteredByContent$neighborsText[i]))
					contentCounter$count[id] <- contentCounter$count[id] + 1
					contentCounter$weight[id] <- contentCounter$weight[id] + filteredByContent$weights[i]
					contentCounter$diversity[id] <- contentCounter$diversity[id] + abs(filteredByContent$weights[i] - contentCounter$lastWeight[id])
					if(contentCounter$monotonity[id] == 0){
						if(filteredByContent$weight[i] < contentCounter$lastWeight[id])
							contentCounter$monotonity[id] <- 1
						else
							contentCounter$monotonity[id] <- 2
					}
					if(contentCounter$monotonity[id] == 1)
					{
						if(filteredByContent$weight[i] > contentCounter$lastWeight[id])
							contentCounter$monotonity[id] <- 3
					}
					if(contentCounter$monotonity[id] == 2)
					{
						if(filteredByContent$weight[i] < contentCounter$lastWeight[id])
							contentCounter$monotonity[id] <- 3
					}
					contentCounter$lastWeight[id] <- filteredByContent$weights[i]           
				}	
			}
			contentCounter$weight <- contentCounter$weight / contentCounter$count
			contentCounter$diversity <- contentCounter$diversity / (contentCounter$count-1)
			longLifeNeighbors <- subset(contentCounter,count>1)
			longLifeNeighbors_sorted <- longLifeNeighbors[sort.list(longLifeNeighbors$weight),]
			
			if(length(longLifeNeighbors_sorted$content) != 0)
			{
				if(sum(longLifeNeighbors$diversity)==0)
				{
					stability = c(stability,100)
				}else
				{
					stability <- c(stability,sum(longLifeNeighbors$count)/(sum(longLifeNeighbors$diversity)/length(longLifeNeighbors$diversity)))
				}
				t <- table(filteredByContent$neighborsText,filteredByContent$graph.year)
				fr <- data.frame(t)
				jac <- 0
				jac2 <- 0
				for(ys in (length(years)-1))
				{
					fr1 <- subset(fr,fr[2] == years[ys])
					fr2 <- subset(fr,fr[2] == years[ys+1])
					if(!(length(fr1$Freq) == 0 || length(fr2$Freq) == 0)){
						freq1 <- fr1$Freq
						freq2 <- fr2$Freq
						inter <- freq1 & freq2
						union <- freq1 | freq2
						jaccard <- sum(inter) / sum(union)
						jac <- jac + jaccard
						cont <- fr2$Var1[inter]
						if(length(cont)!=0){
							divsum <- 0
							for(i in 1:length(cont)){
								filt <- subset(allNeighbors,cent==toString(centralities$content[c]) & neighborsText==cont[i] & (graph.year==years[ys] | graph.year==years[ys+1]))
								divsum <- divsum + abs(filt$weights[2] - filt$weights[1])
							}	
							jaccard2 <- (1-divsum)/sum(union)
							jac2 <- jac2 + jaccard2
						}	
					}       
				}
			
				jaccards <- c(jaccards,jac)
				jaccards2 <- c(jaccards2,jac2)
			}
			else
			{
				jaccards <- c(jaccards,0)
				jaccards2 <- c(jaccards2,0)
				stability <- c(stability,0)
			}
		}	
		names <- as.vector(centralities$content)
		stability.scores$names <- names
		stability.scores$measure1 <- stability
		stability.scores$measure2 <- jaccards
		stability.scores$measure3 <- jaccards2
		stability.scores
	},error=function(ex){print("error")})
	}

	# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
vertex.closeness.statistics <- function(graphs,years=NULL,th=NULL,cutmode="rate")
{
	tryCatch({
	cltab <- vertex.centrality.statistics(graphs,years,method="closeness",th,cutmode)
	cltab
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

plot.closeness.statistics <-function(graphs,years=NULL,th=1.001,ranked=TRUE,cutmode="rate",plotmode="hist",log=FALSE)
{
	tryCatch({
	plot.centrality.statistics(graphs,years,method="closeness",th,ranked,cutmode,plotmode,log)
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

eigen.vector.statistics <- function(graphs,years=NULL,th=NULL,cutmode="rate")
{
	tryCatch({
	evcenttab <- vertex.centrality.statistics(graphs,years,method="eigen",th,cutmode)
	evcenttab
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.evcent.statistics <- function(graphs,years=NULL,th=1.001,ranked=TRUE,cutmode="rate",plotmode="hist",log=FALSE)
{
	tryCatch({
	plot.centrality.statistics(graphs,years,method="eigenvector",th,ranked,cutmode,plotmode,log)
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
kleinberg.statistics <- function(graphs,years=NULL,th=NULL,cutmode="rate")
{
	tryCatch({
	vertex.centrality.statistics(graphs,years,method="kleinberg",th,cutmode)
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.kb.statistics <- function(graphs,years=NULL, th=4,ranked=TRUE,cutmode="rate",plotmode="hist",log=FALSE)
{
	tryCatch({
	plot.centrality.statistics(graphs,years,method="kleinberg",th,ranked,cutmode,plotmode,log)
	},error=function(ex){print("error")})
}
	
# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
page.rank.statistics <- function(graphs,years=NULL,th=NULL,cutmode="rate")
{
tryCatch({
	vertex.centrality.statistics(graphs,years,method="pagerank",th,cutmode)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.pr.statistics <- function(graphs,years=NULL,th=1.05,ranked=TRUE,cutmode="rate",plotmode="hist",log=FALSE)
{	
tryCatch({
	plot.centrality.statistics(graphs,years,method="pagerank",th,ranked,cutmode,plotmode,log)
},error=function(ex){print("error")})
}	


# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

plot.betweenness.stability <- function(graphs,years=NULL,staticth=4,dynamicth=6,cutmode="rate",plotneighbors=TRUE,cdnplotmode=1,stabilitymeasure=2)
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- betweenness.cdn.statistics(graphs,years,staticth,dynamicth,cutmode)
	plot.stability(graphs,centralities,plotneighbors,cdnplotmode,stabilitymeasure)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

closeness.cdn.statistics <- function(graphs,years=NULL,staticth=1.001,dynamicth=4,cutmode="rate")
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	cltab <- vertex.centrality.statistics(graphs,years,method="closeness",th=staticth,cutmode=cutmode)
	cdn.statistics(cltab,dynamicth)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #

cdn.closeness.stability <- function(graphs,years=NULL,staticth=1.001,dynamicth=4,cutmode="rate")
{	
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- closeness.cdn.statistics(graphs,years,staticth,dynamicth,cutmode)
	get.cdn.stability(graphs,centralities)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.closeness.stability <- function(graphs,years=NULL,staticth=1.001,dynamicth=4,cutmode="rate",plotneighbors=TRUE,cdnplotmode=1,stabilitymeasure=2)
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- closeness.cdn.statistics(graphs,years,staticth,dynamicth,cutmode) 
	plot.stability(graphs,centralities,plotneighbors,cdnplotmode,stabilitymeasure)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
evcent.cdn.statistics <- function(graphs,years=NULL,staticth=1.0001,dynamicth=2.5,cutmode="rate")
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	evcenttab <- vertex.centrality.statistics(graphs,years,method="eigenvector",th=staticth,cutmode=cutmode)
	cdn.statistics(evcenttab,dynamicth)
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
cdn.evcent.stability <- function(graphs,years=NULL, staticth=1.0001,dynamicth=2.5,cutmode="rate")
{	
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- evcent.cdn.statistics(graphs,years,staticth,dynamicth,cutmode)
	get.cdn.stability(graphs,centralities)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.evcent.stability <- function(graphs,years=NULL,staticth=1.001,dynamicth=2.5,cutmode="rate",plotneighbors=TRUE,cdnplotmode=1,stabilitymeasure=2)
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- evcent.cdn.statistics(graphs,years,staticth,dynamicth,cutmode) 
	plot.stability(graphs,centralities)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
kleinberg.cdn.statistics <- function(graphs,years=NULL,staticth=2,dynamicth=3,cutmode="rate")
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	kbtab <- vertex.centrality.statistics(graphs,years,method="kleinberg",th=staticth,cutmode=cutmode)
	cdn.statistics(kbtab,dynamicth)		
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
cdn.kleinberg.stability <- function(graphs,years=NULL,staticth=3,dynamicth=3,cutmode="rate")
{	
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- kleinberg.cdn.statistics(graphs,years,staticth,dynamicth,cutmode)
	get.cdn.stability(graphs,centralities)
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.kleinberg.stability <- function(graphs,years=NULL,staticth=3,dynamicth=3,cutmode="rate",plotneighbors=TRUE,cdnplotmode=1,stabilitymeasure=2)
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- kleinberg.cdn.statistics(graphs,years,staticth,dynamicth,cutmode) 
	plot.stability(graphs,centralities,plotneighbors,cdnplotmode,stabilitymeasure)		
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
page.rank.cdn.statistics <- function(graphs,years=NULL,staticth=1.07,dynamicth=1.5,cutmode="rate")
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	prtab <- vertex.centrality.statistics(graphs,years,method="pagerank",th=staticth,cutmode=cutmode)
	cdn.statistics(prtab,dynamicth)	
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
cdn.page.rank.stability <- function(graphs,years=NULL,staticth=1.07,dynamicth=1.5,cutmode="rate")
{	
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- page.rank.cdn.statistics(graphs,years,staticth,dynamicth,cutmode)
	get.cdn.stability(graphs,centralities)	
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.page.rank.stability <- function(graphs,years=NULL,staticth=1.07,dynamicth=1.5,cutmode="rate",plotneighbors=TRUE,cdnplotmode=1,stabilitymeasure=2)
{
tryCatch({
	if(staticth <= 1 && cutmode=="rate") stop("static threshold must be bigger than 1")
	if(dynamicth <= 1 && cutmode == "rate") stop("dynamic threshold must be bigger than 1")
	centralities <- page.rank.cdn.statistics(graphs,years,staticth,dynamicth,cutmode) 
	plot.stability(graphs,centralities,plotneighbors,cdnplotmode,stabilitymeasure)	
},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
		
vertex.centrality.statistics <- function(graphs,years=NULL,method="betweenness",th=NULL,cutmode="rate")
{
tryCatch({
	t.cent <- NULL
	ys <- NULL
	cut <- TRUE
	d <- FALSE
	for (graph in graphs) 
	{
		if(!is.igraph(graph))stop("not a graph object")
		if(is.null(years) || length(years[years==graph$year]) != 0)
		{
			if(method=="betweenness")
			{
				cent <- betweenness(graph,v=V(graph),directed = FALSE)
				n1 <- set.vertex.attribute(graph,"bw",index=V(graph),cent)
			}
			else if(method == "closeness")
			{
				cent <- closeness(graph)
				n1 <- set.vertex.attribute(graph,"cl",index=V(graph),cent)
			}
			else if(method == "eigenvector")
			{
				cent <- evcent(graph)$vector
				n1 <- set.vertex.attribute(graph,"eigen",index=V(graph),cent)
			}
			else if(method == "kleinberg")
			{
				cent <- hub.score(graph)$vector
				n1=set.vertex.attribute(graph,"kb",index=V(graph),cent)
			}
			else if(method == "pagerank")
			{
				cent <- page.rank(graph)$vector
				n1=set.vertex.attribute(graph,"pr",index=V(graph),cent)
			}
			else
			{
				stop("invalid method")
			}
			ys <- c(ys,graph$year)
			
			if(is.null(th))
			{
				if(cut)
				{
					relevantNodes <- V(graph)[cent>summary(cent)[[4]]]
					newgraph <- subgraph(graph,relevantNodes)
					bp_filtered=cent[cent>summary(cent)[[4]]]
					names(bp_filtered) <- V(newgraph)$id
				}
				else
				{
					names(cent) <- V(graph)$id
					bp_filtered=cent[cent>summary(cent)[[4]]]
				}
			}
			else
			{
				if(cut)
				{
					if(cutmode == "rate")
					{
						names(cent) <- V(graph)$id
						relevantNodes <- V(graph)[cent>(max(cent)/th)]
						newgraph <- subgraph(graph,relevantNodes)
						bp_filtered <- cent[cent>(max(cent)/th)]
						
					}else if(cutmode == "fix")
					{
						relevantNodes <- V(graph)[cent>th]
						newgraph <- subgraph(graph,relevantNodes)
						bp_filtered=cent[cent>th]
						names(bp_filtered) <- V(newgraph)$id
					}
					else
					{
						stop("invalid cut mode")
					}
				}
				else
				{
					if(cutmode == "rate")
					{
						names(cent) <- V(graph)$id
						bp_filtered <- cent[cent>(max(cent)/th)]
					}else if(cutmode == "fix")
					{
						names(cent) <- V(graph)$id
						bp_filtered=cent[cent>th]
					}
					else
					{
						stop("invalid cut mode")
					}
				}
			}
			if(length(bp_filtered) != 0)
			{
				d <- TRUE
				bp_filtered_sorted=sort(bp_filtered,decreasing=TRUE);
				uj=data.frame(names(bp_filtered_sorted),bp_filtered_sorted,graph$year)
				t.cent=rbind(t.cent,uj)
			}
				
		}
	}
	centtab <- NULL
	if(d)centtab=xtabs(bp_filtered_sorted~names.bp_filtered_sorted.+graph.year,data=t.cent)
	centtab
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
plot.centrality.statistics <- function(graphs,years=NULL,method="betweenness",th=NULL,ranked=FALSE,cutmode="rate",plotmode="hist",log=FALSE)
{
tryCatch({
	centtab <- vertex.centrality.statistics(graphs,years,method,th,cutmode)
	par(mar=c(3,8,1,1),family="serif",mfrow=c(2,2))
	years <- as.numeric(colnames(centtab))
	#years <- colnames(centtab)
	allys <- NULL
	for(g in graphs)
	{
		allys <- c(allys,g$year)
	}
	l <- list()
	n <- 0
	newColor <- "green"
	colors <- data.frame(year=years,color = sample(colors(),size=length(years),replace=FALSE)) 
	oldVertices <- NULL
	actualColors <- NULL
	newVertex <- NULL
	weights <- NULL
	filenames <- NULL
	centFrame <- data.frame(centtab)
	centFrame <- data.frame(content = centFrame$names.bp_filtered_sorted.,year=centFrame$graph.year,cent=centFrame$Freq)
	for(y in years)
	{
		verticesInYear <- NULL
		centInYear <- subset(centFrame,year==y,select=c(content,cent))
		centNonZero <- subset(centInYear,cent>0,select=c(content,cent))
		actualColors <- NULL
		centOrderedNodes <- centNonZero[sort.list(centNonZero$cent),]
		if(ranked)
		{
			terms <- centOrderedNodes
		}
		else
		{
			terms <- centNonZero
		}
		for(j in 1:length(terms$content)){
			if(!is.null(oldVertices))
				newVertex <- subset(oldVertices,content==terms$content[j],select=content)
			if(length(newVertex$content) == 0){
				oldVertices <- rbind(oldVertices,data.frame(content=terms$content[j],year=y,age=1,weight=terms$cent[j]))
				actualColors <- c(actualColors,newColor)
			}else{
				Id <- which(oldVertices$content==terms$content[j])
				oldVertices$age[Id] = oldVertices$age[Id] + 1
				oldVertices$weight[Id] = oldVertices$weight[Id] + oldVertices$age[Id]*terms$cent[j]
				oldyear <- as.numeric(subset(oldVertices,content == terms$content[j],select=year))
				#oldyear <- subset(oldVertices,content == terms$content[j],select=year)
				col <- subset(colors,year==toString(oldyear),select=color)
				actualColors <- c(actualColors,toString(col$color))
				verticesInYear <- c(verticesInYear,oldyear)  
			}
			ordinate <- terms$content
			absciss <- terms$cent  
		}
		if(plotmode=="hist")
		{
			if(ranked)
			{
				filename <- method + "Dist_" + y + "_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(mar=c(3,8,1,1),family="serif",mfrow=c(1,1))
				barplot(height=absciss,names.arg=ordinate,horiz=TRUE,las=2,cex.names=1,cex.axis=0.5,col=actualColors,main=paste(method,y,sep=" "))
			}
			else
			{
				filename <- method + "Dist_" + y + "_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(mar=c(3,8,1,1),family="serif",mfrow=c(1,1))
				barplot(height=absciss,names.arg=ordinate,legend.text=verticesInYear,horiz=TRUE,las=2,cex.names=1,cex.axis=0.5,col=actualColors,main=paste(method,y,sep=" "))
			}
		}else if(plotmode == "point")
		{
			if(log)
			{
				filename <- method + "_log_Dist_" + y + "_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				plot(x=1:length(absciss),y=rev(absciss), type='p',log="xy",main=paste(method,paste(" log distribution ",y)),ylab=paste(method," scores"))
			}
			else
			{
				filename <- method + "Dist_" + y + "_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(family="serif",mfrow=c(1,1))
				plot(x=1:length(absciss),y=rev(absciss),type='p',main=paste(method,paste(" distribution ",y)),xlab="nodes",ylab=paste(method," scores"))	
			}
		}
		else
		{
			stop("invalid plotmode")
		}
		dev.off()
		t <- NULL
		t$year <- y
		t$filename <- filename
		l[[n <- n+1]] <- t
	}
	
	if(is.null(l))return(rep("NaP",length(allys)))
	i <- 1
	for(y in allys)
	{
		if(y == l[[i]]$year)
		{
			filenames <- c(filenames,l[[i]]$filename)
			i <- i+1
		}
		else if(y > l[[i]]$year)
		{
			
		}
		else if(y < l[[i]]$year)
		{
			filenames <- c(filenames, "NaP")
		}
	}
	paste(paste(getwd(), "/",sep=""), filenames,sep="")
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
		
plot.stability <- function(graphs,centralities,plotneighbors=TRUE,cdnplotmode=1,stabilitymeasure=2)
{
tryCatch({
	if(is.null(centralities))return("NaP")	
	filenames <- NULL
	filename <- NULL
	years <-  centralities[[2]]
	centralities <- centralities[[1]]
	allNeighbors <- NULL
	skeleton <- NULL
	for(graph in graphs)
	{
		if(is.null(years) || length(intersect(years,graph$interval)) != 0)
		{
			for(c in 1:(length(centralities$content)+1))
			{ 
				id <- which(V(graph)$id==centralities$content[c])
				if(length(id) != 0){
					neighbors <- neighbors(graph,id-1)
					if(length(neighbors) != 0)
					{
						neighborsText <- NULL
						weights <-  NULL
						for(i in 1:length(neighbors))
						{
							neighborsText <- c(neighborsText,V(graph)$id[neighbors[i]+1])
							weights <- c(weights,E(graph,P=c(id-1,neighbors[i]))$weight)
						}	
						cent <- NULL
						cent[1:length(neighbors)] <- toString(centralities$content[c])
						allNeighbors <- rbind(allNeighbors,data.frame(cent,neighborsText,graph$year,weights))
					}
				}
			}     
		}
	}
	
	stability <- NULL
	jaccards <- NULL
	jaccards2 <- NULL
	i <- 0

	for(c in 1:length(centralities$content))
	{
		contentCounter <- NULL
		print(allNeighbors)
		filteredByContent <- subset(allNeighbors,cent == toString(centralities$content[c]),select=c(neighborsText,graph.year,weights))	
		#contentTab <- table(filteredByContent$cent,filteredByContent$neighborsText)
		diversities <- NULL
		if(length(centralities$content) == 0)
		{
			stability <- c(stability,0)
			jaccards <- c(jaccards, 0)
			jaccards2 <- c(jaccards2, 0)
		}
		for(i in 1:length(filteredByContent$neighborsText))
		{
			item <- subset(contentCounter,contentCounter$content == toString(filteredByContent$neighborsText[i]))
			if(length(item$content)==0){
				contentCounter <- rbind(contentCounter,data.frame(content = toString(filteredByContent$neighborsText[i]),count = 1,weight=filteredByContent$weights[i],lastWeight=filteredByContent$weights[i],diversity=0,monotonity=0))
			}else{
				id <- which(contentCounter$content == toString(filteredByContent$neighborsText[i]))
				contentCounter$count[id] <- contentCounter$count[id] + 1
				contentCounter$weight[id] <- contentCounter$weight[id] + filteredByContent$weights[i]
				contentCounter$diversity[id] <- contentCounter$diversity[id] + abs(filteredByContent$weights[i] - contentCounter$lastWeight[id])
				if(contentCounter$monotonity[id] == 0){
					if(filteredByContent$weight[i] < contentCounter$lastWeight[id])
						contentCounter$monotonity[id] <- 1
					else
						contentCounter$monotonity[id] <- 2
				}
				if(contentCounter$monotonity[id] == 1)
				{
					if(filteredByContent$weight[i] > contentCounter$lastWeight[id])
						contentCounter$monotonity[id] <- 3
				}
				if(contentCounter$monotonity[id] == 2)
				{
					if(filteredByContent$weight[i] < contentCounter$lastWeight[id])
						contentCounter$monotonity[id] <- 3
				}
				contentCounter$lastWeight[id] <- filteredByContent$weights[i]           
			}	
		}
		contentCounter$weight <- contentCounter$weight / contentCounter$count
		contentCounter$diversity <- contentCounter$diversity / (contentCounter$count-1)
		longLifeNeighbors <- subset(contentCounter,count>1)
		longLifeNeighbors_sorted <- longLifeNeighbors[sort.list(longLifeNeighbors$weight),]
		if(length(longLifeNeighbors$count) !=0)
		{
		if(plotneighbors)
		{
			ncount <- length(longLifeNeighbors$count)
			level <- 255/ncount*2
			if(level > 30) level <- 30
			if(any(cdnplotmode == 1))
			{
				w2 <- longLifeNeighbors_sorted$weight
				colors <- NULL
				w3 <- NULL
				col <- 255
				col2 <- 255
				tomb <- NULL
				contents <- NULL
				for(i in 1:length(w2)){
					e <- w3[w3 == w2[i]]
					if(length(e) == 0){
						if(col2 > level){
							col2 <- col2 - level
						}else{
							if(col > 20){
								col <- col - level
							}
						}
						colors <- c(colors,rgb(col,col2,0,maxColorValue=255))
						w3 <- c(w3,w2[i])
					}else{
						colors <- c(colors,rgb(col,col2,0,maxColorValue=255))
					}
				}
		
				w2 <- round(w2,digits=2)
				filename <- "cdn_stat_" + centralities$content[c] + "_mode1_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(mar=c(3,8,1,1),family="serif",mfrow=c(1,1))
				barplot(height = longLifeNeighbors_sorted$count,names.arg = longLifeNeighbors_sorted$content,horiz=TRUE,las=2,cex.names=1,cex.axis=0.5,main=paste("statistics of the neighbors of the CDN node: ",centralities$content[c]),col=colors,legend.text=w2)
				dev.off()
		}

			inter <- intersect(longLifeNeighbors_sorted$content,centralities$content)
			if(length(inter) != 0)
				skeleton <- rbind(skeleton,data.frame(vertex1=centralities$content[c],vertex2=inter))
			if(any(cdnplotmode==2) || any(cdnplotmode==3)){
				longLifeNeighbors_sorted <- longLifeNeighbors[sort.list(longLifeNeighbors$diversity),]
				w2 <- longLifeNeighbors_sorted$diversity
				colors <- NULL
				colors2 <- NULL
				w3 <- NULL
				col <- 255
				col2 <- 255
				tomb <- NULL
				w4 <- longLifeNeighbors_sorted$monotonity
				contents <- NULL
				monotonities <- NULL
				for(i in 1:length(w2)){
					if(w4[i] == 1){
						colors2 <- c(colors2,"lightblue")
						monotonities <- c(monotonities,"decreasing")
					}	
					if(w4[i] == 2){
						colors2 <- c(colors2,"tomato")
						monotonities <- c(monotonities, "increasing")
					}
					if(w4[i] == 3){
						colors2 <- c(colors2, "yellow4")
						monotonities <- c(monotonities,"not monotone")
					}
					e <- w3[w3 == w2[i]]
					if(length(e) == 0){
						if(col2 > level){
							col2 <- col2 - level
						}else{
							if(col > 20){
								col <- col - level
							}
						}
						if(col2 < 0) col2 <- 1
						if(col < 0) col <- 1
						colors <- c(colors,rgb(col,col2,0,maxColorValue=255))
						w3 <- c(w3,w2[i])
					}else{
						colors <- c(colors,rgb(col,col2,0,maxColorValue=255))
					}
				}
			}
			w2 <- round(w2,digits=2)
			if(any(cdnplotmode == 2))
			{
				filename <- "cdn_stat_" + centralities$content[c] + "_mode2_" + unclass(Sys.time()) + ".png"
				png(width=800,height=600,filename=filename)
				par(mar=c(3,8,1,1),family="serif",mfrow=c(1,1))
				barplot(height = longLifeNeighbors_sorted$count,names.arg = longLifeNeighbors_sorted$content,horiz=TRUE,las=2,cex.names=1,cex.axis=1,main=paste("statistics of the neigbors of CDN node: ",centralities$content[c]),col=colors,legend.text=w2)
				dev.off()
			}
			if(any(cdnplotmode == 3))	
			{
				filename <- "cdn_stat" + centralities$content[c] + "_mode3_" + unclass(Sys.time()) + ".png" 
				png(width=800,height=600,filename=filename)
				par(mar=c(3,8,1,1),family="serif",mfrow=c(1,1))
				barplot(height = w2, names.arg = longLifeNeighbors_sorted$content,horiz = TRUE,main=paste("statistics of the neighbors of CDN node: ",centralities$content[c]),col = colors2,cex.names=1,las=2,cex.axis=1, legend.text = monotonities)
				dev.off()
			}
		}
			if(sum(longLifeNeighbors$diversity == 0))
				stability <- c(stability,100)
			else
				stability <- c(stability,sum(longLifeNeighbors$count)/(sum(longLifeNeighbors$diversity)/length(longLifeNeighbors$diversity)))
			t <- table(filteredByContent$neighborsText,filteredByContent$graph.year)
			fr <- data.frame(t)
			jac <- 0
			jac2 <- 0
			for(ys in (length(years)-1))
			{
				fr1 <- subset(fr,fr[2] == years[ys])
				fr2 <- subset(fr,fr[2] == years[ys+1])
				if(!(length(fr1$Freq) == 0 || length(fr2$Freq) == 0)){
					freq1 <- fr1$Freq
					freq2 <- fr2$Freq
					inter <- freq1 & freq2
					union <- freq1 | freq2
					jaccard <- sum(inter) / sum(union)
					jac <- jac + jaccard
					cont <- fr2$Var1[inter]
					if(length(cont)!=0){
						divsum <- 0
						for(i in 1:length(cont)){
							filt <- subset(allNeighbors,cent==toString(centralities$content[c]) & neighborsText==cont[i] & (graph.year==years[ys] | graph.year==years[ys+1]))
							divsum <- divsum + abs(filt$weights[2] - filt$weights[1])
						}	
						jaccard2 <- (1-divsum)/sum(union)
						jac2 <- jac2 + jaccard2
					}	
				}       
			}
			jaccards <- c(jaccards,jac)
			jaccards2 <- c(jaccards2,jac2)
			filenames <- c(filenames,filename)
		}else{
			jaccards <- c(jaccards,0)
			jaccards2 <- c(jaccards2,0)
			stability <- c(stability,0)
		}
		
	}

	names <- as.vector(centralities$content)
	if(!is.null(skeleton ))
		graphSkeleton <- graph.data.frame(skeleton,directed=FALSE)
	label <- c(as.vector(skeleton$vertex1),as.vector(skeleton$vertex2))
	labelu <- unique(label)
	if( !is.null(skeleton))
	{
		filename <- "dyn_skeleton_" + unclass(Sys.time()) + ".png"
		filenames <- c(filenames,filename)
		png(width=800,height=600,filename=filename)
		plot.igraph(graphSkeleton,vertex.size=60,vertex.label=labelu,vertex.color="green")
		dev.off()
	}
	#if(length(stability) > 50)
		#stop("too much CDN to plot the stability diagrams. Set a correct threshold")
	if(any(stabilitymeasure == 1))
	{
		filename <- "cdn_stab_m_1_" + unclass(Sys.time()) + ".png"
		filenames <- c(filenames,filename)
		png(width=800,height=600,filename=filename)
		barplot(height = stability, names.arg = names,horiz = TRUE,main="stability of the CDNs, measure 1",cex.names=1,las=2,cex.axis=1)
		dev.off()
	}
	
	if(any(stabilitymeasure == 2))
	{
		filename <- "cdn_stab_m_2_" + unclass(Sys.time()) + ".png"
		filenames <- c(filenames,filename)
		png(width=800,height=600,filename=filename)
		barplot(height = jaccards, names.arg = names, horiz = TRUE, main = "stability of the CDNs, measure 2",cex.names=1,las=2,cex.axis=1)
		dev.off()
	}
	if(any(stabilitymeasure == 3))
	{
		filename <- "cdn_stab_m_3_" + unclass(Sys.time()) + ".png"
		filenames <- c(filenames,filename)
		png(width=800,height=600,filename=filename)
		barplot(height = jaccards2, names.arg = names, horiz = TRUE, main = "stability of the CDNs, measure 3",cex.names=1,las=2,cex.axis=1)
		dev.off()
	}
	if(is.null(filenames))"NaP"
	else {
		 paste(paste(getwd(), "/",sep=""), filenames,sep="")
	}
	},error=function(ex){print("error")})
}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	timeplot.node.statistics <-function(graphs,years=NULL,attr = "betweenness", th=NULL,cutmode="rate")
	{
	tryCatch({
		cut <- TRUE
		t.bw=NULL
		g <- 0
		ys <- NULL
		d <- FALSE
		filename <- attr + "_timeplot_" + unclass(Sys.time()) + ".png"
		png(width=800,height=600,filename=filename)
		for (graph in graphs) 
		{
			if(!is.igraph(graph))stop("not a graph object")
			if(is.null(years) || length(years[years==graph$year]) != 0)
			{
				if(attr=="betweenness")
				{
					cent <- betweenness(graph,v=V(graph),directed = FALSE)
				}
				else if(attr == "closeness")
				{
					cent <- closeness(graph)
				}
				else if(attr == "eigen")
				{
					cent <- evcent(graph)$vector
				}
				else if(attr == "kleinberg")
				{
					cent <- hub.score(graph)$vector
				}
				else if(attr == "page.rank")
				{
					cent <- page.rank(graph)$vector
				}else
				{
					g <- list()
					g[[1]] <- graph
					cent <- do.call(attr,g)
				}
				
				n1 <- set.vertex.attribute(graph,"cent",index=V(graph),cent)
				if(is.null(th))
				{
					if(cut)
					{
						relevantNodes <- V(graph)[cent>summary(cent)[[4]]]
						newgraph <- subgraph(graph,relevantNodes)
						bp_filtered=cent[cent>summary(cent)[[4]]]
						names(bp_filtered) <- V(newgraph)$id
					}
					else
					{
						names(cent) <- V(graph)$id
						bp_filtered=cent[cent>summary(cent)[[4]]]
					}
				}
				else
				{
					if(cut)
					{
						if(cutmode == "rate")
						{
							names(cent) <- V(graph)$id
							relevantNodes <- V(graph)[cent>(max(cent)/th)]
							newgraph <- subgraph(graph,relevantNodes)
							bp_filtered <- cent[cent>(max(cent)/th)]
						}else if(cutmode == "fix")
						{
							relevantNodes <- V(graph)[cent>th]
							newgraph <- subgraph(graph,relevantNodes)
							bp_filtered=cent[cent>th]
							names(bp_filtered) <- V(newgraph)$id
						}
						else 
						{
							stop("invalid cutmode")
						}
					}
					else
					{
						if(cutmode == "rate")
						{
							names(cent) <- V(graph)$id
							bp_filtered <- cent[cent>(max(cent)/th)]
						}else if(cutmode == "fix")
						{
							names(cent) <- V(graph)$id
							bp_filtered=cent[cent>th]
						}
						else
						{
							stop("invalid cutmode")
						}
					}
				}
				if(length(bp_filtered) != 0)
				{
					d <- TRUE
					ys <- c(ys,graph$year)
					bp_filtered_sorted=sort(bp_filtered,decreasing=TRUE);
					uj=data.frame(names(bp_filtered_sorted),bp_filtered_sorted,graph$year)
					t.bw=rbind(t.bw,uj)
				}
			}
		}
		bwtab <- NULL
		if(d)bwtab=xtabs(bp_filtered_sorted~names.bp_filtered_sorted.+graph.year,data=t.bw)
		if(is.null(bwtab))
		{
			print("threshold too high. Nothing plotted")
			return("NaP")
		}else
		{
			years <- ys
			y <- years
			bwFrame <- data.frame(bwtab)
			bwFrame <- data.frame(content = bwFrame$names.bp_filtered_sorted.,year=bwFrame$graph.year,bw=bwFrame$Freq)
			maxBw <-subset(bwFrame,bw==max(bwFrame$bw))
			maxNodeDynamics <- subset(bwFrame,content==maxBw$content[1])
			plot(y,maxNodeDynamics$bw,type='o',col=sample(colors()),main=paste("dynamic statistics of the node attribute: ",attr),ylab=paste(attr, " scores"))
			text(as.numeric(as.vector(maxBw$year)),maxBw$bw+maxBw$bw/50,maxBw$content[1],cex=0.7)
			bwFrame <- subset(bwFrame,content!=maxBw$content[1])
			for(term in bwFrame$content)
			{
				nodeDynamics<-subset(bwFrame,content==term)
				bwFrame <- subset(bwFrame,content!=term)
				localMax<- subset(nodeDynamics,bw==max(nodeDynamics$bw))
				if(length(nodeDynamics$bw[nodeDynamics$bw>0])>0)
				{
					lines(y,nodeDynamics$bw,type='o',col=sample(colors()))
					if(localMax$bw>maxBw$bw/6)
					{
						filt<-subset(nodeDynamics,bw>localMax$bw/4)
						xpos<- sample(as.numeric(as.vector(filt$year)),size=1)
						ypos<-subset(nodeDynamics,year==xpos)$bw
						text(xpos,ypos+localMax$bw/50,term,cex=0.7)
					}
				}
			}
			dev.off()
		}
		if(is.null(filename))"NaP"
		else  {
			paste(paste(getwd(), "/",sep=""), filename,sep="")
		}
		},error=function(ex){print("error")})
	}	

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	dynamic.page.rank.statistics <- function(graphs,years=NULL,th=1.001,cutmode="rate")
	{
		tryCatch({
			timeplot.node.statistics(graphs,years,attr="pagerank",th,cutmode)
		},error=function(ex){print("error")})
	}
	
# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	dynamic.kleinberg.statistics <- function(graphs,years=NULL,th=3,cutmode="rate")
	{
		tryCatch({
			timeplot.node.statistics(graphs,years,attr="kleinberg",th,cutmode)
		},error=function(ex){print("error")})
	}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	dynamic.evcent.statistics <- function(graphs,years=NULL,th=0.1,cutmode="fix")
	{
		tryCatch({
			timeplot.node.statistics(graphs,years,attr="eigen",th,cutmode)
		},error=function(ex){print("error")})
	}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	dynamic.closeness.statistics <- function(graphs,years=NULL,th=1.001,cutmode="rate")
	{
		tryCatch({
			timeplot.node.statistics(graphs,years,attr="closeness",th,cutmode)
		},error=function(ex){print("error")})
	}

# !!!!!!!!!!!!!!!!! TEST OK !!!!!!!!!!!!!!!!! #
	
	dynamic.betweenness.statistics <- function(graphs,years=NULL,th=4,cutmode="rate")
	{	
		tryCatch(
			timeplot.node.statistics(graphs,years,attr="betweenness",th,cutmode)
		},error=function(ex){print("error")})
	}
	
	

plot.clique.numbers <- function(cliques)
{
	tryCatch({
	barplot(height=cliques$cl,names.arg=cliques$year,las=2,cex.names=1,cex.axis=0.5,main="number of complete subgraphs")
	},error=function(ex){print("error")})
}

vertex.numbers.time <- function(graphs,years=NULL)
{
tryCatch({
	vertex.numbers <- NULL
	for(n0a in graphs)
	{
		if(is.null(years) || length(years[years==n0a$year]) != 0)
		{
			no <- length(V(n0a))
			vertex.numbers <- rbind(vertex.numbers,data.frame(number = no,year = n0a$year))
		}
	}
	vertex.numbers
},error=function(ex){print("error")})
}

plot.vertex.numbers.time <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	vertex.numbers <- vertex.numbers.time(graphs,years)
	barplot(height=vertex.numbers$number,names.arg=vertex.numbers$year,las=2,cex.names=1,cex.axis=0.5,main="vertex numbers")
	dev.off()
},error=function(ex){print("error")})
}

vertex.gaining.speed <- function(graphs,years=NULL)
{
tryCatch({
	speed <- 0
	no <- vertex.numbers.time(graphs,years)
	last <- no[1]
	for(n in no)
	{
		speed <- speed + abs(last - n)
		last <- n
	}
	speed
},error=function(ex){print("error")})
}



plot.edge.numbers.time <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	edge.numbers <- edge.numbers.time(graphs,years)
	barplot(height=edge.numbers$number,names.arg=edge.numbers$year,las=2,cex.names=1,cex.axis=0.5,main="edge numbers")
	dev.off()
},error=function(ex){print("error")})
}

edge.numbers.time <- function(graphs,years=NULL)
{
tryCatch({
	edge.numbers <- NULL
	for(n0a in graphs)
	{
		if(is.null(years) || length(years[years==n0a$year]) != 0)
		{
			no <- length(E(n0a))
			edge.numbers <- rbind(edge.numbers,data.frame(number = no,year = n0a$year))
		}
	}
	edge.numbers
},error=function(ex){print("error")})
}

plot.degree.dist.time <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	par(mfrow=c(2,2))
	dist<- NULL
	i <- 0
	for(n0a in graphs)
	{
		if(is.null(years) || length(years[years==n0a$year]) != 0)
		{
			dist <- degree.distribution(n0a)
			barplot(height=dist,las=2,cex.names=1,cex.axis=0.5,main=n0a$label)	
		}
	}
	dev.off()
},error=function(ex){print("error")})
}

graph.diameter.time <- function(graphs,years=NULL)
{
tryCatch({
	diameters <- NULL
	i <- 0
	for(n0a in graphs)
	{
		if(is.null(years) || length(years[years==n0a$year]) != 0)
		{
			d <- diameter(n0a)
			diameters <- rbind(diameters,data.frame(d = d,year = n0a$year))
		}
	}
	diameters
},error=function(ex){print("error")})
}

plot.graph.diameter.time <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	diameters <- graph.diameter.time(graphs,years)
	barplot(height=diameters$d,names.arg=diameters$year,las=2,cex.names=1,cex.axis=0.5,main="graph diameters")
	dev.off()
},error=function(ex){print("error")})
}
average.path.lengths.time <- function(graphs,years=NULL)
{
tryCatch({
	averages <- NULL
	i <- 0
	for(n0a in graphs)
	{
		if(is.null(years) || length(years[years==n0a$year]) != 0)
		{
			avg <- average.path.length(n0a,directed=FALSE)
			averages <- rbind(averages,data.frame(avg = avg,year = n0a$year))
		}
	}
	averages
},error=function(ex){print("error")})
}


plot.average.path.lengths <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	averages <- average.path.lengths.time(graphs,years)
	barplot(height=averages$avg,names.arg=averages$year,las=2,cex.names=1,cex.axis=0.5,main="average path length")
	dev.off()
},error=function(ex){print("error")})
}

clique.numbers.time <- function(graphs,years=NULL)
{
tryCatch({
	cliques <- NULL
	i <- 0
	for(n0a in graphs)
	{

		if(is.null(years) || length(years[years==n0a$year]) != 0){
			cliqueno <- clique.number(n0a)
			cliques <- rbind(cliques,data.frame(cl=cliqueno,year = n0a$year))
		}
	}
	cliques
},error=function(ex){print("error")})
}

plot.clique.numbers.time <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	cliques <- clique.numbers.time(graphs,years)
	barplot(height=cliques$cl,names.arg=cliques$year,las=2,cex.names=1,cex.axis=0.5,main="number of complete subgraphs")
},error=function(ex){print("error")})
}
graph.cohesion.time <- function(graphs,years=NULL)
{
tryCatch({
	coh <- NULL
	i <- 0
	for(n0a in graphs)
	{
		if(is.null(years) || length(years[years==n0a$year]) != 0)
		{
			c <- graph.cohesion(n0a)
			coh <- rbind(coh,data.frame(cohesion = c,year=n0a$year))
		}
	}
	coh
},error=function(ex){print("error")})
}

plot.graph.cohesion.time <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	coh <- graph.cohesion.time(graphs,years)
	barplot(height=coh$c,names.arg=coh$year,las=2,cex.names=1,cex.axis=0.5,main="cohesion of the graph")
	dev.off()
},error=function(ex){print("error")})
}

graph.density.time <- function(graphs,years)
{
tryCatch({
	densities <- NULL
	i <- 0
	for(graph in graphs)
	{
		if(is.null(years) || length(years[years==n0a$year]) != 0)
		{
			d <- graph.density(graph)
			densities <- rbind(densities,data.frame(den=d,year=graph$year))
		}
	}
},error=function(ex){print("error")})
}

plot.graph.density.time <- function(densities)
{
tryCatch({
	png(width=600,height=600)
	barplot(densities$den,names.arg=densities$year,las=2,cex.names=1,cex.axis=0.5,main="density of graphs")
},error=function(ex){print("error")})
}

plot.graph.density.time <- function(graphs,years=NULL)
{
tryCatch({
	png(width=600,height=600)
	densities <- graph.density.time(graphs,years)
	barplot(densities$den,names.arg=densities$year,las=2,cex.names=1,cex.axis=0.5,main="density of graphs")
},error=function(ex){print("error")})
}

plot.vnum.diameter.ratio<- function(graphs,years)
{
tryCatch({
	png(width=600,height=600)
	diameters <- NULL
	vnum <- NULL
	i <- 0
	for(n0a in graphs)
	{
		d <- diameter(n0a)
		diameters <- rbind(diameters,data.frame(d = d,year = n0a$year))
		vnum <- c(vnum,length(V(n0a)))
	}
	barplot(diameters,vnum)
},error=function(ex){print("error")})
}build.graph3 <- function(nodeIndex="int02_id_CLEANED.csv",trendIndex="int02_py.csv",filter=NULL,sep=";",node.cut=c("intentionality","INTENTIONALITY"),time.cut=1,sim="jaccard")
{
tryCatch({
	graphs <- NULL
	t1 <- read.csv2(nodeIndex,header=TRUE,sep=";")
	t2 <- read.csv2(trendIndex,header=TRUE,sep=";")
	h1 <- colnames(t1)
	h2 <- colnames(t2)
	index <- intersect(h1,h2)
	if(length(index)==0)stop(paste(paste(paste("there are no matching columns in ",nodeIndex)," and "),trendIndex))
	if(length(index) > 1)stop(paste("multiple columns matching: ",toString(index)))
	trend <- h2[h2 != index]
	if(length(trend) ==0)stop(paste("there is no trend column in file",trendIndex))
	if(length(trend) >1)stop(paste("more than two columns in file",trendIndex))
	if(!is.null(filter))evek <- filter
	else evek <- sort(unique(eval(parse(text=paste("t2$",trend)))))
	node <- h1[h1 != index]
	k <- 0
	if(length(node) == 0)stop(paste("there is no node column in file",nodeIndex))
	if(length(node) > 1)stop(paste("more than two columns in file",nodeIndex))
	if(time.cut > 1)
	{
		
		felbont=cut(evek,time.cut)
		period=as.data.frame(cbind(evek,as.vector(felbont)))
		colnames(period)=c(trend,"period")
		t1m=merge(t1,t2,by.x=index,by.y=index)
		colnames(t1m)=c(index,node,trend)
		t1p=merge(t1m,period,by.x=trend,by.y=trend)
		idok=split(t1p,t1p$period)
		for (i in 1:length(idok)) 
		{
			terms <- eval(parse(text=paste("idok[[i]]$",node)))
			actIndex <- eval(parse(text=paste("idok[[i]]$",index)))
			actYear <- eval(parse(text=paste("idok[[i]]$",trend)))
			if(length(terms) > 0)
			{
				terms=as.character(terms)
				td=table(terms,actIndex)
				s1 <- as.matrix(simil(td,method=sim))
				write(s1, paste("graph",idok[[i]]$period[1]))
				g=graph.adjacency(s1, mode="undirected", weighted=T, diag=F, add.colnames=NULL)
				g$year <- actYear[1]
				#g$year <- as.vector(idok[[i]]$period[1])
				g$interval <- g$year:actYear[length(actYear)]
				g$label <- idok[[i]]$period[1]
				g <- set.vertex.attribute(g,"id",index=V(g),colnames(s1))
				for(c in node.cut)
				{
					sub=subset(V(g),!V(g)$id==c)
					g <- subgraph(g,sub)
				}
				g$edges <- length(E(g))
				g$nodes <- length(V(g))
				comp <- clusters(g,mode="strong")
				g$components <- comp$no
				graphs[[k <- k + 1]] <- g
			}
		}
		return(graphs)
	}
	else
	{
		t1m <- merge(t1,t2,by.x=index,by.y=index)
		colnames(t1m) <- c(index,node,trend)
		for(i in evek)
		{
			t.filtered <- subset(t1m,t1m[colnames(t1m)==trend]==i,select=c(index,node))
			no <- eval(parse(text=paste("t.filtered$",node)))
			ind <- eval(parse(text=paste("t.filtered$",index)))
			if(length(no)>0 || length(t.filtered$V1) > 0)
			{
				write.table(t.filtered,file=paste(i,".csv",sep=""),sep=";",row.names=FALSE)
				t2 <- read.table(paste(i,".csv",sep=""),sep=";",col.names=c("record","term"),header=TRUE)
				unlink(paste(i,".csv",sep=""))
				m1 <- table(t2$term,t2$record)
				s1 <- as.matrix(simil(m1,method="jaccard"))
				pro.n1=graph.adjacency(s1, mode="undirected", weighted=TRUE, diag=FALSE)
				n0a=set.vertex.attribute(pro.n1,"id",index=V(pro.n1),colnames(s1))
				n0a <- set.graph.attribute(n0a,"year",i)
				n0a$interval <- i
				n0a$label <- i
				for(c in node.cut)
				{
					sub=subset(V(n0a),!V(n0a)$id==c)
					n0a <- subgraph(n0a,sub)
				}
				g <- n0a
				g$edges <- length(E(g))
				g$nodes <- length(V(g))
				comp <- clusters(g,mode="strong")
				g$components <- comp$no
				graphs[[k <- k + 1]] <- g
			}
		}
	}
	graphs
	},error=function(ex){print("error")})
}

build.graph2 <- function(fileName1="int02_id_CLEANED.csv",fileName2="int02_py.csv",header1 = TRUE,header2= TRUE,index="record",trend="year",node="term",filter=NULL,sep=";",node.cut=c("intentionality","INTENTIONALITY"),time.cut=1,sim="jaccard")
{
	tryCatch({
	if(time.cut<1)stop("time.cut must be positive integer")
	graphs <- NULL
	k <- 0
	t1=read.csv2(fileName1,header=header1,sep=sep)
	t2=read.csv2(fileName2,header=header2,sep=sep)
	h1 <- NULL
	h2 <- NULL
	temp <- NULL
	if(is.null(index))
	{
		index[1] <- colnames(t1[1])
		index[2] <- colnames(t2[1])
		node <- colnames(t1[2])
	}
	if(length(index) >= 2)
	{
		temp1 <- index[1]
		temp2 <- index[2]
		if(is.numeric(index[1]))
		{
			temp1 <- colnames(t1)[index[1]]
		}
		if(is.numeric(index[2]))
		{
			temp2 <- colnames(t2)[index[2]]
		}
		index[1] <- temp1
		index[2] <- temp2
	}
	else
	{
		if(is.numeric(index))
		{
			temp <- NULL
			temp[1] <- colnames(t1)[index]
			temp[2] <- colnames(t2)[index]
			index <- temp
		}
		else
		{
			temp <- c(index,index)
			index <- temp
		}
	}
	if(is.null(node))
	{
		node <- colnames(t1[2])
	}
	if(is.numeric(node))
	{
		node <- colnames(t1[node[1]])
	}
	else
	{
		node <- node[1]
	}
	h1 <- colnames(t1)
	ind <- h1[h1 == node]
	if(length(ind) == 0) stop(paste(paste(paste("there is no column '",node,sep=""),"' in file", sep=""),fileName1))
	if(length(ind) > 1) stop(paste(paste(paste("multpile column:",node),"in file"),fileName1))
	ind <- h1[h1 == index[1]]
	if(length(ind) == 0)stop(paste(paste(paste("there is no column '",index[1],sep=""),"in file",sep=""),fileName1))
	if(length(ind) > 1) stop(paste(paste(paste("multiple column:",index[1]),"in file"),fileName1))
	h2 <- colnames(t2)
	ind <- h2[h2 == index[2]]
	if(length(ind) == 0)stop(paste(paste(paste("there is no column '",index[2],sep=""),"' in file",sep=""),fileName2))
	if(!is.null(filter))
		evek <- years
	else
	{
		if(is.null(trend))
		{
			trend <- colnames(t2[2])
		}
		if(is.numeric(trend))
		{
			trend <- colnames(t2[trend[1]])
		}
		else
		{
			trend <- trend[1]
		}
		tr <- h2[h2 == trend]
		if(length(tr) > 1)stop(paste(paste(paste("multiple column:",trend),"in file"),fileName2))
		if(length(tr) == 0)stop(paste(paste(paste("no column '",trend),"' exists in file"),fileName2))
		evek <- sort(unique(eval(parse(text=paste("t2$",trend)))))
		if(!is.numeric(evek))stop("trend parameter must be numeric")
	}
	if(time.cut > 1)
	{
		felbont=cut(evek,time.cut)
		period=as.data.frame(cbind(evek,as.vector(felbont)))
		colnames(period)=c(trend,"period")
		t1m=merge(t1,t2,by.x=index[1],by.y=index[2])
		colnames(t1m)=c(index[1],node,trend)
		t1p=merge(t1m,period,by.x=trend,by.y=trend)
		idok=split(t1p,t1p$period)
		for (i in 1:length(idok)) 
		{
			actNode <- eval(parse(text=paste("idok[[i]]$",node)))
			actIndex <- eval(parse(text=paste("idok[[i]]$",index)))
			actYear <- eval(parse(text=paste("idok[[i]]$",trend)))
			if(length(actNode) > 0)
			{
				actNode=as.character(actNode)
				td=table(actNode,actIndex)
				s1 <- as.matrix(simil(td,method=sim))
				g=graph.adjacency(s1, mode="undirected", weighted=T, diag=F, add.colnames=NULL)
				g$year <- actYear[1]
				#g$year <- as.vector(idok[[i]]$period[1])
				g$interval <- g$year:actYear[length(actYear)]
				g$label <- idok[[i]]$period[1]
				g <- set.vertex.attribute(g,"id",index=V(g),colnames(s1))
				for(c in node.cut)
				{
					sub=subset(V(g),!V(g)$id==c)
					g <- subgraph(g,sub)
				}
				g$edges <- length(E(g))
				g$nodes <- length(V(g))
				comp <- clusters(g,mode="strong")
				g$components <- comp$no
				graphs[[k <- k + 1]] <- g
			}
		}	
	}
	else
	{
		t1m <- merge(t1,t2,by.x=index[1],by.y=index[2])
		colnames(t1m) <- c(index[1],node,trend)
		for(i in evek)
		{
			t.filtered <- subset(t1m,t1m[colnames(t1m)==trend]==i,select=c(index[1],node))
			no <- eval(parse(text=paste("t.filtered$",node)))
			ind <- eval(parse(text=paste("t.filtered$",index[1])))
			if(length(no)>0)
			{
				write.table(t.filtered,file=paste(i,".csv",sep=""),sep=";",col.names=c("record","term"),row.names=FALSE)
				t2 <- read.table(paste(i,".csv",sep=""),sep=";",header=TRUE)
				unlink(paste(i,".csv",sep=""))
				m1 <- table(t2$term,t2$record)
				s1 <- as.matrix(simil(m1,method="jaccard"))
				pro.n1=graph.adjacency(s1, mode="undirected", weighted=TRUE, diag=FALSE)
				n0a=set.vertex.attribute(pro.n1,"id",index=V(pro.n1),colnames(s1))
				n0a <- set.graph.attribute(n0a,"year",i)
				n0a$interval <- i
				n0a$label <- i
				for(c in node.cut)
				{
					sub=subset(V(n0a),!V(n0a)$id==c)
					n0a <- subgraph(n0a,sub)
				}
				g <- n0a
				g$edges <- length(E(g))
				g$nodes <- length(V(g))
				comp <- clusters(g,mode="strong")
				g$components <- comp$no
				graphs[[k <- k + 1]] <- g
			}
		}
	}
	graphs
	},error=function(ex){print("error")})
}

build.metric.graphs <- function(fileName="WOS_kw_index.csv",years=1993:2008,sep=";",header=TRUE,index="record",trend="year",node="term",node.cut=c("intentionality","INTENTIONALITY"),time.cut=1,sim="jaccard")
{
tryCatch({
	graphs <- NULL
	k <- 0
	t=read.csv2(fileName,header=header,sep=sep)
	if(TRUE)
	{
		index <- "record"
		node <- "term"
		trend <- "year"
		colnames(t) <- c(index,node,trend)
		evek <- sort(unique(t$year))
	}
	else
	{
		evek <- t$year
	}
	if(!is.null(years))evek <- years

	if(time.cut > 1)
	{
		felbont=cut(evek,time.cut)
		period=as.data.frame(cbind(evek,as.vector(felbont)))
		colnames(period)=c(trend,"period")
		t1p=merge(t,period,by.x=trend,by.y=trend)
		idok=split(t1p,t1p$period)
		for (i in 1:length(idok)) 
		{
			
			actNode <- eval(parse(text=paste("idok[[i]]$",node)))
			actIndex <- eval(parse(text=paste("idok[[i]]$",index)))
			actYear <- eval(parse(text=paste("idok[[i]]$",trend)))
			
			if(length(idok[[i]]$term) > 0)
			{
				idok[[i]]$term=as.character(idok[[i]]$term)
				td=table(idok[[i]]$term,idok[[i]]$record)
				d=dist(td, method = "binary")
				d=as.matrix(d)
				w=1-d
				g=graph.adjacency(w, mode="undirected", weighted=T, diag=F, add.colnames=NULL)
				g$year <- idok[[i]]$year[1]
				#g$year <- as.vector(idok[[i]]$period[1])
				#g$last.year <- idok[[i]]$evek[length(idok[[i]]$evek)]
				g$label <- idok[[i]]$period[1]
				g$interval <- g$year:actYear[length(actYear)]
				g <- set.vertex.attribute(g,"id",index=V(g),colnames(w))
				for(c in node.cut)
				{
					sub=subset(V(g),!V(g)$id==c)
					g <- subgraph(g,sub)
				}
				g$edges <- length(E(g))
				g$nodes <- length(V(g))
				comp <- clusters(g,mode="strong")
				g$components <- comp$no
				graphs[[k <- k + 1]] <- g
			}
		}	
	}
	else
	{
		counter <- 0
		for(i in evek)
		{
			t.filtered <- subset(t,year==i,select=c(index,node))
			if(length(t.filtered$term)>0 || length(t.filtered$V1) > 0)
			{
				write.table(t.filtered,file=paste(i,".csv",sep=""),sep=";",row.names=FALSE)
				t2 <- read.table(paste(i,".csv",sep=""),sep=";",header=TRUE)
				unlink(paste(i,".csv",sep=""))
				m1 <- table(t2$term,t2$record)
				s1 <- as.matrix(simil(m1,method="jaccard"))
				pro.n1 <- graph.adjacency(s1, mode="undirected", weighted=TRUE, diag=FALSE)
				n0a <- set.vertex.attribute(pro.n1,"id",index=V(pro.n1),colnames(s1))
				n0a <- set.graph.attribute(n0a,"year",i)
				n0a$label <- i
				n0a$interval <- i
				for(c in node.cut)
				{
					sub=subset(V(n0a),!V(n0a)$id==c)
					n0a <- subgraph(n0a,sub)
				}
				g$edges <- length(E(g))
				g$nodes <- length(V(g))
				comp <- clusters(g,mode="strong")
				g$components <- comp$no
				graphs[[k <- k + 1]] <- n0a
			}
		}
	}
	graphs
	},error=function(ex){print("error")})
}

read.dynamic.graphs <- function(fileName,years,sep=";",directed=FALSE)
{
tryCatch({
	graphs <- list()
	t1 <- read.csv(fileName,sep=sep,header=TRUE)
	counter <- 0
	for(i in years)
	{
		t.filtered <- subset(t1,year==i)
		graph.frame <- data.frame(t.filtered)
		if(length(graph.frame$year) == 0)stop("invalid year attribute")
		vertices <- c(as.vector(graph.frame$vertex1),as.vector(graph.frame$vertex2))	
		vertices_u <- unique(vertices)
		n0a <- graph.data.frame(graph.frame, directed=directed)
		n0a<-set.vertex.attribute(n0a,"id",index=V(n0a),vertices_u)
		n0a <- set.graph.attribute(n0a,"year",i)
		#sub=subset(V(n0a),!V(n0a)$id=="intentionality")
		#n0a=subgraph(n0a,sub)
		graphs[[counter <- counter + 1]] <- n0a
	}
	graphs
	},error=function(ex){print("error")})
}

read.file.to.table <- function(fileName,separator)
{
	t1 <- read.csv(fileName,sep=separator,header=TRUE)
	t1
}